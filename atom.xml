<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xdh129&#39;s Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xdh129.github.io/"/>
  <updated>2020-11-30T12:15:02.000Z</updated>
  <id>https://xdh129.github.io/</id>
  
  <author>
    <name>Xdh129</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PTA拼题网作业-算法_回溯-1130</title>
    <link href="https://xdh129.github.io/2020/11/30/Algorithm-Learning-OnLine-Homework-201130/"/>
    <id>https://xdh129.github.io/2020/11/30/Algorithm-Learning-OnLine-Homework-201130/</id>
    <published>2020-11-30T12:15:02.000Z</published>
    <updated>2020-11-30T12:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最佳调度问题"><a href="#最佳调度问题" class="headerlink" title="最佳调度问题"></a>最佳调度问题</h4><ol><li>假设有n（n&lt;=20）个任务由k（k&lt;=20）个可并行工作的机器完成。完成任务i需要的时间为ti。 试设计一个算法，对任意给定的整数n和k，以及完成任务i 需要的时间为ti ，i=1~n。计算完成这n个任务的最佳调度，使得完成全部任务的时间最早。<br>输入格式:</li></ol><p>输入数据的第一行有2 个正整数n和k。第2 行的n个正整数是完成n个任务需要的时间。<br>输出格式:</p><p>将计算出的完成全部任务的最早时间输出到屏幕。<br>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>7 3<br>2 14 4 16 6 5 3 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>17 </p></blockquote><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tasks[<span class="number">20</span>], taskR[<span class="number">20</span>], min = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backTrace</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> kn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">        <span class="keyword">int</span> max = taskR[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= kn; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (taskR[k] &gt; max) &#123;</span><br><span class="line">                max = taskR[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; min) &#123;</span><br><span class="line">            min = max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; kn; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (taskR[k] + tasks[x] &gt; min) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        taskR[k] += tasks[x];</span><br><span class="line">        backTrace(x + <span class="number">1</span>, n, kn);</span><br><span class="line">        taskR[k] -= tasks[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, kn;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;kn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tasks[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; kn; ++k) &#123;</span><br><span class="line">        taskR[k] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    backTrace(<span class="number">0</span>, n, kn);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_112714.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><ol start="2"><li>在国际象棋中，皇后是最厉害的棋子，可以横走、直走，还可以斜走。棋手马克斯·贝瑟尔 1848 年提出著名的八皇后问题：即在 8 × 8 的棋盘上摆放八个皇后，使其不能互相攻击 —— 即任意两个皇后都不能处于同一行、同一列或同一条斜线上。例如：</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="T2Detail.jpg" alt="题图" title="">                </div>                <div class="image-caption">题图</div>            </figure> <p>现在我们把棋盘扩展到 n×n 的棋盘上摆放 n 个皇后，请问该怎么摆？</p><p>请编写程序，输入正整数 n，输出全部摆法（棋盘格子空白处显示句点“.”，皇后处显示字母“Q”，每两个字符之间空一格）。<br>输入格式</p><blockquote><pre><code>正整数 n(n&gt;0) </code></pre></blockquote><p>输出格式</p><blockquote><pre><code>若问题有解，则输出全部摆法（每两种摆法之间空一行）。 若问题无解，则输出 None。 </code></pre></blockquote><p>要求：试探的顺序按从上到下逐行进行，其中每一行按从左到右的逐格进行，请参看输出样例2。</p><p>输入样例1</p><blockquote><p>3</p></blockquote><p>输出样例1</p><blockquote><p>None </p></blockquote><p>输入样例2</p><blockquote><p>6 </p></blockquote><p>输出样例2</p><blockquote><p>. Q . . . .<br>. . . Q . .<br>. . . . . Q<br>Q . . . . .<br>. . Q . . .<br>. . . . Q . </p><p>. . Q . . .<br>. . . . . Q<br>. Q . . . .<br>. . . . Q .<br>Q . . . . .<br>. . . Q . . </p><p>. . . Q . .<br>Q . . . . .<br>. . . . Q .<br>. Q . . . .<br>. . . . . Q<br>. . Q . . . </p><p>. . . . Q .<br>. . Q . . .<br>Q . . . . .<br>. . . . . Q<br>. . . Q . .<br>. Q . . . . </p></blockquote><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> a[][<span class="number">1000</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1, y1 = y, m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = y - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k) &#123;</span><br><span class="line">        x1 = <span class="number">0</span>, y1 = k;</span><br><span class="line">        m = y - y1;</span><br><span class="line">        <span class="keyword">while</span> (a[y1][x1] != <span class="string">'Q'</span>)</span><br><span class="line">            x1++;</span><br><span class="line">        <span class="keyword">if</span> (x1 == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x1 - m == x || x1 + m == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">s</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">char</span> a[][<span class="number">1000</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i][j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j != n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(j, x, a)) &#123;</span><br><span class="line">            a[x][j] = <span class="string">'Q'</span>;</span><br><span class="line">            s(x + <span class="number">1</span>, a);</span><br><span class="line">            a[x][j] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    s(<span class="number">0</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"None\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_113736.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h4><ol start="3"><li>给定n(n&lt;=100)种物品和一个背包。物品i的重量是wi，价值为vi，背包的容量为C(C&lt;=1000)。问:应如何选择装入背包中的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品i只有两个选择：装入或不装入。不能将物品i装入多次，也不能只装入部分物品i。<br>输入格式:</li></ol><p>共有n+1行输入： 第一行为n值和c值，表示n件物品和背包容量c； 接下来的n行，每行有两个数据，分别表示第i(1≤i≤n)件物品的重量和价值。</p><p>输出格式:</p><p>输出装入背包中物品的最大总价值。</p><p>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>5 10<br>2 6<br>2 3<br>6 5<br>5 4<br>4 6 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>15 </p></blockquote><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> itemWeights[n + <span class="number">1</span>], itemValues[n + <span class="number">1</span>], dp[<span class="number">105</span>][<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;itemWeights[k], &amp;itemValues[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= itemWeights[i]) &#123;</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - itemWeights[i]] + itemValues[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n][c]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_094042.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h4><p>4.将一个正整数拆分成若干个正整数的和。<br>输入格式:</p><p>一个正整数n<br>输出格式:</p><p>若干行，每行一个等式（每个数或者等号间都有一个空格，第一个数前没有空格，最后一个数后面没有空格，数与数之间要求非降序排列）。最后一行给出解的总个数<br>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>4 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>4 = 1 + 1 + 1 + 1<br>4 = 1 + 1 + 2<br>4 = 1 + 3<br>4 = 2 + 2<br>4 </p></blockquote><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, count = <span class="number">0</span>, dp[<span class="number">1001</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d = "</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; x - <span class="number">1</span>; ++k) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d + "</span>, dp[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[x - <span class="number">1</span>]);</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = dp[x - <span class="number">1</span>]; k &lt;= num; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; n) &#123;</span><br><span class="line">                dp[x] = k;</span><br><span class="line">                num -= k;</span><br><span class="line">                dfs(num, x + <span class="number">1</span>);</span><br><span class="line">                num += k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    dfs(n, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_111345.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="666"><a href="#666" class="headerlink" title="666"></a>666</h4><ol start="5"><li>小明有一张m*n的好习惯记录卡，记录每一天的好习惯目标达成度（数字0-9表示）。某天目标完成达成，就在当天的格子里写上数字6，目标没有完全达成就写上一个小于6的数字（0-5），目标超额完成就写上一个大于6的数字（7-9）。记录卡上如果能找到一条长度为3的路径并且路径上的三个数字都大于等于6（这里的路径是指从某个格子出发，可以向左、右、上、下格子移动，并且不能重复经过一个格子），则小明就能得到一个“666”奖励。<br>请你帮小明统计下他总共能得到多少“666”奖励。</li></ol><p>输入格式:</p><p>输入第一行给出两个正整数m,n(1=&lt;m,n&lt;=100),随后是m行，每行包含n个0-9之间的数字。<br>输出格式:</p><p>先输出m行，每行包括n个整数，代表从当前格子出发得到的“666”奖励个数，中间用空格分割，最后一个数字后面不带空格。然后再在下一行输出得到的“666”奖励总数。</p><p>输入样例:</p><blockquote><p>3 3<br>6 6 7<br>3 8 3<br>7 9 5 </p></blockquote><p>输出样例:</p><blockquote><p>2 1 2<br>0 3 0<br>1 1 0<br>10 </p></blockquote><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arrayS[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">0</span>,  <span class="number">1</span>&#125;,&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>,  <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> dpArray[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> habitArray[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> posX = x + arrayS[i][<span class="number">0</span>], posY = y + arrayS[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (posY &gt;= <span class="number">0</span> &amp;&amp; posX &gt;= <span class="number">0</span> &amp;&amp; posY &lt; n &amp;&amp; posX &lt; m &amp;&amp; dpArray[posX][posY] != <span class="number">1</span>) &#123;</span><br><span class="line">                dpArray[posX][posY] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (habitArray[posX][posY] &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">                    temp += dfs(posX, posY, m, n, step + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                dpArray[posX][posY] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;habitArray[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            dpArray[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (habitArray[i][j] &gt;= <span class="number">6</span>)&#123;</span><br><span class="line">                num = dfs(i, j, m, n, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            dpArray[i][j] = <span class="number">0</span>;</span><br><span class="line">            count += num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, num);</span><br><span class="line">            <span class="keyword">if</span> (j == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_102634.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="工作分配问题"><a href="#工作分配问题" class="headerlink" title="工作分配问题"></a>工作分配问题</h4><ol start="6"><li>设有n件工作分配给n个人。将工作i分配给第j个人所需的费用为cij 。 设计一个算法，对于给定的工作费用，为每一个人都分配1 件不同的工作，并使总费用达到最小。</li></ol><p>输入格式:</p><p>输入数据的第一行有1 个正整数n (1≤n≤20)。接下来的n行，每行n个数，表示工作费用。</p><p>输出格式:</p><p>将计算出的最小总费用输出到屏幕。</p><p>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>3<br>10 2 3<br>2 3 4<br>3 4 5 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>9 </p></blockquote><h5 id="程序代码-5"><a href="#程序代码-5" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> workers[<span class="number">22</span>], resultArray[<span class="number">22</span>][<span class="number">22</span>], min = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost &lt; min) &#123;</span><br><span class="line">            min = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            cost += resultArray[x][k];</span><br><span class="line">            <span class="keyword">if</span> (workers[k] != <span class="number">1</span> &amp;&amp; cost &lt; min) &#123;</span><br><span class="line">                workers[k] = <span class="number">1</span>;</span><br><span class="line">                dfs(x + <span class="number">1</span>, n, cost);</span><br><span class="line">                workers[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cost -= resultArray[x][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;resultArray[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, n, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-5"><a href="#运行截图-5" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_104528.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最佳调度问题&quot;&gt;&lt;a href=&quot;#最佳调度问题&quot; class=&quot;headerlink&quot; title=&quot;最佳调度问题&quot;&gt;&lt;/a&gt;最佳调度问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;假设有n（n&amp;lt;=20）个任务由k（k&amp;lt;=20）个可并行工作的机器完成。完成任务i需要
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法设计实验5-回溯-1130</title>
    <link href="https://xdh129.github.io/2020/11/30/Algorithm-Learning-Homework-201130/"/>
    <id>https://xdh129.github.io/2020/11/30/Algorithm-Learning-Homework-201130/</id>
    <published>2020-11-30T11:15:53.000Z</published>
    <updated>2020-11-30T11:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="整数变换问题"><a href="#整数变换问题" class="headerlink" title="整数变换问题"></a>整数变换问题</h4><ol><li>整数变换问题。<br>问题描述：整数i的两种变换定义为 ， （向下取整）；设计一个算法求给定两个整数a和b，用最少次数的 和 变换将整数a变换为b；例如<br>实现提示：<br>观察f和g两个操作可知，f总是使得i变大，g总是使得i变小。因此在决定让x执行哪个操作之前可以先判断i和目标值m之间的大小关系。如果x&gt;m，就让其执行g操作；反之，执行f操作。<br>问题的解分为两种情况，一种是有解，即n可以通过函数变换成m；另一种是无解，即n无法通过函数变换成m。<br>有解的情况比较容易，只需要判断最后的i是否等于m即可。如果i等于m，那么说明n已经被变换成m了，递归返回。<br>无解的情况可用下例分析。假设我们的输入n=9,m=5。<br>n&gt;m,执行g,n=[9/2]=4<br>n&lt;m,执行f,n=3<em>4=12<br>n&gt;m,执行g,n=[12/2]=6<br>n&gt;m,执行f,n=[6/2]=3<br>n&lt;m,执行g,n=3</em>3=9<br>n&gt;m,执行f,n=[9/2]=4<br>如果n的值陷入了一个重复的循环，如果在递归的过程中，出现了前面计算过的元素，那就说明n是无法转换成m的。这种方法实现稍微复杂，需要判断当前所求出的数值之前是否出现过。 另一种简单的处理方式： 对于m无论如何变换都不能变为n的情况，可以加一个判断条件，比如深度达一个较大值为止（如1000）。<br>回溯法， 用子集树实现，子集树结构为：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="t1Detail.png" alt="子集树结构" title="">                </div>                <div class="image-caption">子集树结构</div>            </figure> 回溯返回条件有两个，一个是i等于m，另一个是出现了重复的数字。第二个返回条件可以用一个函数test来判断。<br>剪枝条件：<br>显式约束：如果x&gt;m，就剪掉它的左子树；如果x&lt;m，就剪掉它的右子树；<br>隐式约束：如果在某次计算的过程中发现当前的计算次数已经大于或等于最少计算次数了，那么就剪掉这个分支。</li></ol><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count, foundFlag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">transform</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; count) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">        s = n;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            s = g(s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s = f(s);</span><br><span class="line">        &#125;</span><br><span class="line">        num[m] = k;</span><br><span class="line">        <span class="keyword">if</span> (s == b || transform(m + <span class="number">1</span>, s, a, b, num)) &#123;</span><br><span class="line">            foundFlag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *num)</span> </span>&#123;</span><br><span class="line">    count = <span class="number">1</span>;</span><br><span class="line">    foundFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!transform(<span class="number">1</span>, a, a, b, num)) &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundFlag != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, num[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>; ++k) &#123;</span><br><span class="line">        num[k] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请依次输入a和b的值: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">    compare(a, b, num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (foundFlag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"运算次数为: %d\n"</span>, count);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"运算转换过程为: "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = count; k &gt;= <span class="number">1</span>; --k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"g"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num[k] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"f"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d 无法转换成%d \n"</span>, a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_121121.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="子集和问题"><a href="#子集和问题" class="headerlink" title="子集和问题"></a>子集和问题</h4><ol start="2"><li>子集和问题。<br>问题描述：给定集合S，S中有n个正整数，M是一个正整数。子集和问题判定是否存在S的一个子集S1，使得S1中各元素之和等于M。请设计回溯法求解子集和问题，如果问题无解，输出“No Solution”,问题有解，则输出满足子集S1中各元素的值。 </li></ol><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag, a[<span class="number">10005</span>], rec[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> start, <span class="keyword">int</span> sum, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum == m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cnt; ++k) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, rec[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = start; k &lt;= n; ++k) &#123;</span><br><span class="line">        rec[cnt] = a[k];</span><br><span class="line">        dfs(n, m, k + <span class="number">1</span>, sum + a[k], cnt + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(n, m, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_115336.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="工作分配问题"><a href="#工作分配问题" class="headerlink" title="工作分配问题"></a>工作分配问题</h4><ol start="3"><li>工作分配问题。<br>问题描述：设有n件工作分配给n个人。将工作i分配给第j个人的费用为cij,请设计算法，为每个人都分配1件不同的工作，并使得总费用达到最小。<br>实现提示：该问题的解空间是一棵排列树，可用搜索排列树的回溯框架实现。</li></ol><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> workers[<span class="number">22</span>], resultArray[<span class="number">22</span>][<span class="number">22</span>], min = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost &lt; min) &#123;</span><br><span class="line">            min = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            cost += resultArray[x][k];</span><br><span class="line">            <span class="keyword">if</span> (workers[k] != <span class="number">1</span> &amp;&amp; cost &lt; min) &#123;</span><br><span class="line">                workers[k] = <span class="number">1</span>;</span><br><span class="line">                dfs(x + <span class="number">1</span>, n, cost);</span><br><span class="line">                workers[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cost -= resultArray[x][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;resultArray[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, n, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-10_104528.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;整数变换问题&quot;&gt;&lt;a href=&quot;#整数变换问题&quot; class=&quot;headerlink&quot; title=&quot;整数变换问题&quot;&gt;&lt;/a&gt;整数变换问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;整数变换问题。&lt;br&gt;问题描述：整数i的两种变换定义为 ， （向下取整）；设计一个算法求给定两个
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PTA拼题网作业-算法_贪心算法-1123</title>
    <link href="https://xdh129.github.io/2020/11/24/Algorithm-Learning-OnLine-Homework-201123/"/>
    <id>https://xdh129.github.io/2020/11/24/Algorithm-Learning-OnLine-Homework-201123/</id>
    <published>2020-11-24T12:15:02.000Z</published>
    <updated>2020-11-24T12:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="装箱问题"><a href="#装箱问题" class="headerlink" title="装箱问题"></a>装箱问题</h4><ol><li>假设有N项物品，大小分别为s​1​​、s​2​​、…、s​i​​、…、s​N​​，其中s​i​​为满足1≤s​i​​≤100的整数。要把这些物品装入到容量为100的一批箱子（序号1-N）中。装箱方法是：对每项物品, 顺序扫描箱子，把该物品放入足以能够容下它的第一个箱子中。请写一个程序模拟这种装箱过程，并输出每个物品所在的箱子序号，以及放置全部物品所需的箱子数目。</li></ol><p>输入格式：</p><p>输入第一行给出物品个数N（≤1000）；第二行给出N个正整数s​i​​（1≤s​i​​≤100，表示第i项物品的大小）。</p><p>输出格式：</p><p>按照输入顺序输出每个物品的大小及其所在的箱子序号，每个物品占1行，最后一行输出所需的箱子数目。</p><p>输入样例：</p><blockquote><p>8<br>60 70 80 90 30 40 10 20 </p></blockquote><p>输出样例：</p><blockquote><p>60 1<br>70 2<br>80 3<br>90 4<br>30 1<br>40 5<br>10 1<br>20 2<br>5 </p></blockquote><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> items[n], boxs[n], boxPos[n], boxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;items[k]);</span><br><span class="line">        boxs[k] = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> box = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (items[k] &gt; boxs[box]) &#123;</span><br><span class="line">            ++box;</span><br><span class="line">        &#125;</span><br><span class="line">        boxs[box] -= items[k];</span><br><span class="line">        boxPos[k] = box;</span><br><span class="line">        <span class="keyword">if</span> (boxCount - <span class="number">1</span> &lt; box) &#123;</span><br><span class="line">            boxCount = box + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, items[k], boxPos[k] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, boxCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_100336.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="月饼"><a href="#月饼" class="headerlink" title="月饼"></a>月饼</h4><ol start="2"><li>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</li></ol><p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p><p>输入格式：</p><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p><p>输出格式：</p><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p><p>输入样例：</p><blockquote><p>3 20<br>18 15 10<br>75 72 45 </p></blockquote><p>输出样例：</p><blockquote><p>94.50 </p></blockquote><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvertedShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">double</span> *arrayP, <span class="keyword">double</span> *anotherArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">double</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">double</span> anotherTemp = *(anotherArrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &lt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    *(anotherArrayP + k + gap) = *(anotherArrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">                *(anotherArrayP + k + gap) = anotherTemp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> requestStock;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;n, &amp;requestStock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> mkStock[n], mkPrice[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;mkStock[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;mkPrice[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> mkUnitPrice[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        mkUnitPrice[k] = (<span class="keyword">double</span>) mkPrice[k] / mkStock[k];</span><br><span class="line">    &#125;</span><br><span class="line">    InvertedShellSort(n, mkUnitPrice, mkStock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> nextStock = <span class="number">0.0</span>, requestStocks[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        nextStock += mkStock[i];</span><br><span class="line">        <span class="keyword">if</span> (requestStock &lt;= nextStock) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k) &#123;</span><br><span class="line">                requestStocks[k] = mkStock[k];</span><br><span class="line">            &#125;</span><br><span class="line">            requestStocks[i] = mkStock[i] - (nextStock - requestStock);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                requestStocks[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                requestStocks[k] = mkStock[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> maxProfit = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        maxProfit += mkUnitPrice[k] * requestStocks[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, maxProfit);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_100423.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="最优合并问题"><a href="#最优合并问题" class="headerlink" title="最优合并问题"></a>最优合并问题</h4><ol start="3"><li>给定k 个排好序的序列, 用 2 路合并算法将这k 个序列合并成一个序列。 假设所采用的 2 路合并算法合并 2 个长度分别为m和n的序列需要m+n-1 次比较。试设 计一个算法确定合并这个序列的最优合并顺序，使所需的总比较次数最少。 为了进行比较，还需要确定合并这个序列的最差合并顺序，使所需的总比较次数最多。</li></ol><p>输入格式:</p><p>第一行有 1 个正整数k，表示有 k个待合并序列。 第二行有 k个正整数，表示 k个待合并序列的长度。</p><p>输出格式:</p><p>输出最多比较次数和最少比较次数。</p><p>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>4<br>5 12 11 2  </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>78 52 </p></blockquote><p>题目来源：王晓东《算法设计与分析》 </p><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MIN (-INT_MAX - 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX __INT_MAX__</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvertedShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &lt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, comparisionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sequences[n], anotherSequences[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sequences[k]);</span><br><span class="line">        anotherSequences[k] = sequences[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - <span class="number">1</span>; ++k) &#123;</span><br><span class="line">        InvertedShellSort(n, anotherSequences);</span><br><span class="line">        anotherSequences[<span class="number">0</span>] += anotherSequences[<span class="number">1</span>];</span><br><span class="line">        comparisionCount += anotherSequences[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        anotherSequences[<span class="number">1</span>] = INT_MIN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, comparisionCount);</span><br><span class="line"></span><br><span class="line">    comparisionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - <span class="number">1</span>; ++k) &#123;</span><br><span class="line">        ShellSort(n, sequences);</span><br><span class="line">        sequences[<span class="number">0</span>] += sequences[<span class="number">1</span>];</span><br><span class="line">        comparisionCount += sequences[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        sequences[<span class="number">1</span>] = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, comparisionCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_100658.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="看电影"><a href="#看电影" class="headerlink" title="看电影"></a>看电影</h4><p>4.终于到周末了，明明是特别喜欢看电影。他想在一天内尽量多的看到完整的多部电影。 现在他把他喜欢的电影的播放时间表给你，希望你能帮他合理安排。</p><p>输入格式:</p><p>输入包含多组测试数据。每组输入的第一行是一个整数n（n&lt;=100），表示明明喜欢的电影的总数。 接下来n行，每行输入两个整数si和ei（1&lt;=i&lt;=n），表示第i个电影的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。 当n=0时，输入结束。</p><p>输出格式:</p><p>对于每组输入，输出能完整看到的电影的个数。</p><p>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>12<br>1 3<br>3 4<br>0 7<br>3 8<br>15 19<br>15 20<br>10 15<br>8 18<br>6 12<br>5 10<br>4 14<br>2 9<br>0 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>5 </p></blockquote><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP, <span class="keyword">int</span> *anotherArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> anotherTemp = *(anotherArrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    *(anotherArrayP + k + gap) = *(anotherArrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">                *(anotherArrayP + k + gap) = anotherTemp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> si[n], ei[n], count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;si[k], &amp;ei[k]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ShellSort(n, ei, si);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nextEndTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (si[k] &gt;= nextEndTime) &#123;</span><br><span class="line">                nextEndTime = ei[k];</span><br><span class="line">                ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_140012.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="喷水装置"><a href="#喷水装置" class="headerlink" title="喷水装置"></a>喷水装置</h4><ol start="5"><li>长L米，宽W米的草坪里装有n个浇灌喷头。每个喷头都装在草坪中心线上（离两边各W/2米）。我们知道每个喷头的位置（离草坪中心线左端的距离），以及它能覆盖到的浇灌范围。</li></ol><p>请问：如果要同时浇灌整块草坪，最少需要打开多少个喷头？<br>输入格式:</p><p>输入包含若干组测试数据。</p><p>第一行一个整数T表示数据组数。</p><p>每组数据的第一行是整数n、L和W的值，其中n≤10 000。</p><p>接下来的n行，每行包含两个整数，给出一个喷头的位置和浇灌半径。</p><p>如图1所示的示意图是样例输入的第一组数据所描述的情况。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="T4Detail.jpg" alt="喷水装置示例1" title="">                </div>                <div class="image-caption">喷水装置示例1</div>            </figure> <p>输出格式:</p><p>对每组测试数据输出一个数字，表示要浇灌整块草坪所需喷头数目的最小值。如果所有喷头都打开还不能浇灌整块草坪，则输出-1。</p><p>输入样例:</p><blockquote><p>3<br>8 20 2<br>5 3<br>4 1<br>1 2<br>7 2<br>10 2<br>13 3<br>16 2<br>19 4<br>3 10 1<br>3 5<br>9 3<br>6 1<br>3 10 1<br>5 3<br>1 1<br>9 1 </p></blockquote><p>输出样例:</p><blockquote><p>6<br>2<br>-1 </p></blockquote><p>数据范围与提示:</p><p>对于100%的数据，n≤15000。 </p><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 15000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sprayer</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> position;</span><br><span class="line">    <span class="keyword">int</span> radius;</span><br><span class="line">    <span class="keyword">double</span> start;</span><br><span class="line">    <span class="keyword">double</span> end;</span><br><span class="line">&#125; Sprayers[MAX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Sprayer a, Sprayer b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.start &lt; b.start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">    Sprayers sprayers;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; T; a++) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, L, W, count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; L &gt;&gt; W;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; sprayers[k].position &gt;&gt; sprayers[k].radius;</span><br><span class="line">            <span class="keyword">if</span> (sprayers[k].radius &lt;= W / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">            sprayers[count].start = sprayers[k].position - <span class="built_in">sqrt</span>(sprayers[k].radius * sprayers[k].radius - W * W / <span class="number">4.0</span>);</span><br><span class="line">            sprayers[count].end = sprayers[k].position + <span class="built_in">sqrt</span>(sprayers[k].radius * sprayers[k].radius - W * W / <span class="number">4.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::sort(sprayers + <span class="number">1</span>, sprayers + count + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">int</span> minNum = <span class="number">0</span>, k = <span class="number">1</span>, flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sum &lt; L) &#123;</span><br><span class="line">            ++minNum;</span><br><span class="line">            <span class="keyword">double</span> temp = sum;</span><br><span class="line">            <span class="keyword">for</span> (; sprayers[k].start &lt;= temp &amp;&amp; k &lt;= count; ++k)<span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span> (sum &lt; sprayers[k].end) &#123;</span><br><span class="line">                    sum = sprayers[k].end;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp == sum &amp;&amp; temp &lt; L) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; minNum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_150551.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h4><ol start="6"><li>假定一个有n个活动(activity)的集合S={a​1​​,a​2​​,….,a​n​​}，这些活动使用同一个资源（例如同一个阶梯教室），而这个资源在某个时刻只能供一个活动使用。每个活动a​i​​都有一个开始时间s​i​​和一个结束时间f​i​​，其中0&lt;=s​i​​&lt;f​i​​&lt;=32767。如果被选中，任务a​i​​发生在半开时间区间[s​i​​,f​i​​)期间。如果两个活动a​i​​和a​j​​满足[s​i​​,f​i​​)和[s​j​​,f​j​​)不重叠，则称它们是兼容的。也就说，若s​i​​&gt;=f​j​​或s​j​​&gt;=f​i​​，则a​i​​和a​j​​是兼容的。在活动选择问题中，我们希望选出一个最大兼容活动集。</li></ol><p>输入格式:</p><p>第一行一个整数n(n≤1000)；</p><p>接下来的n行，每行两个整数，第一个s​i​​，第二个是f​i​​(0&lt;=s​i​​&lt;f​i​​&lt;=32767)。</p><p>输出格式:</p><p>输出最多能安排的活动个数。</p><p>输入样例:</p><blockquote><p>11<br>3 5<br>1 4<br>12 14<br>8 12<br>0 6<br>8 11<br>6 10<br>5 7<br>3 8<br>5 9<br>2 13 </p></blockquote><p>输出样例:</p><blockquote><p>4 </p></blockquote><p>样例解释:</p><p>安排的4个活动为1 4, 5 7, 8 11和12 14。 </p><h5 id="程序代码-5"><a href="#程序代码-5" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectMinPos</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, min = tempArrayP[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; s; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; tempArrayP[k]) &#123;</span><br><span class="line">            min = tempArrayP[k];</span><br><span class="line">            index = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMinWaitTime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP, <span class="keyword">int</span> *waitTimeArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = SelectMinPos(s, tempArrayP);</span><br><span class="line">        tempArrayP[index] += waitTimeArrayP[k];</span><br><span class="line">        sum += tempArrayP[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> waitTime[n], temp[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;waitTime[k]);</span><br><span class="line">        temp[k] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShellSort(n, waitTime);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, GetMinWaitTime(n, <span class="number">1</span>, temp, waitTime));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-5"><a href="#运行截图-5" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-08_193605.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;装箱问题&quot;&gt;&lt;a href=&quot;#装箱问题&quot; class=&quot;headerlink&quot; title=&quot;装箱问题&quot;&gt;&lt;/a&gt;装箱问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;假设有N项物品，大小分别为s​1​​、s​2​​、…、s​i​​、…、s​N​​，其中s​i​​为满足1≤s​i
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法设计实验4-贪心算法-1123</title>
    <link href="https://xdh129.github.io/2020/11/24/Algorithm-Learning-Homework-201123/"/>
    <id>https://xdh129.github.io/2020/11/24/Algorithm-Learning-Homework-201123/</id>
    <published>2020-11-24T10:35:02.000Z</published>
    <updated>2020-11-24T10:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最优服务次序问题"><a href="#最优服务次序问题" class="headerlink" title="最优服务次序问题"></a>最优服务次序问题</h4><ol><li>最优服务次序问题。<br>问题描述：设有n个顾客同时等待一项服务，顾客i需要的服务时间为ti，（1&lt;=i&lt;=n）。应如何安排n个顾客的服务次序才能使平均等待时间达到最小？（平均等待时间是n个顾客等待服务时间总和除以n）<br>输入：第一行为一个正整数n，表示有n个顾客<br>第二行为n个正整数，表示n个顾客需要的服务时间<br>输出：最小平均等待时间。 </li></ol><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectMinPos</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index, min = tempArrayP[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; s; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; tempArrayP[k]) &#123;</span><br><span class="line">            min = tempArrayP[k];</span><br><span class="line">            index = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMinWaitTime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP, <span class="keyword">int</span> *waitTimeArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = SelectMinPos(s, tempArrayP);</span><br><span class="line">        tempArrayP[index] += waitTimeArrayP[k];</span><br><span class="line">        sum += tempArrayP[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> waitTime[n], temp[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;waitTime[k]);</span><br><span class="line">        temp[k] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShellSort(n, waitTime);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, GetMinWaitTime(n, <span class="number">1</span>, temp, waitTime));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-08_211820.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="多处最优服务次序问题"><a href="#多处最优服务次序问题" class="headerlink" title="多处最优服务次序问题"></a>多处最优服务次序问题</h4><ol start="2"><li>多处最优服务次序问题。<br>问题描述：设有n个顾客同时等待一项服务，顾客i需要的服务时间为ti，（1&lt;=i&lt;=n）。共有s处可以提供此项服务。应如何安排n个顾客的服务次序才能使平均等待时间达到最小？<br>输入：第一行为两个正整数n和s<br>第二行为n个正整数，表示n个顾客需要的服务时间<br>输出：最小平均等待时间。 </li></ol><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);  </span><br><span class="line">                <span class="keyword">int</span> k = j - gap;  </span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;  </span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);  </span><br><span class="line">                    k -= gap;  </span><br><span class="line">                &#125;  </span><br><span class="line">                *(arrayP + k + gap) = temp;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectMinPos</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, min = tempArrayP[<span class="number">0</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; s; ++k) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (min &gt; tempArrayP[k]) &#123;  </span><br><span class="line">            min = tempArrayP[k];  </span><br><span class="line">            index = k;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> index;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMinWaitTime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP, <span class="keyword">int</span> *waitTimeArrayP)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;  </span><br><span class="line">        <span class="keyword">int</span> index = SelectMinPos(s, tempArrayP);  </span><br><span class="line">        tempArrayP[index] += waitTimeArrayP[k];  </span><br><span class="line">        sum += tempArrayP[index];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> sum / n;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n, s;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;s);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> waitTime[n], temp[n];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;waitTime[k]);  </span><br><span class="line">        temp[k] = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    ShellSort(n, waitTime);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, GetMinWaitTime(n, s, temp, waitTime));  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-08_213205.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="最优分解问题"><a href="#最优分解问题" class="headerlink" title="最优分解问题"></a>最优分解问题</h4><ol start="3"><li>最优分解问题。<br>问题描述：设n是一个正整数，要求将n分解为若干互不相同的自然数之和，且这些自然数的乘积最大。<br>输入：正整数n<br>输出：计算的最大乘积。<br>如输入10，则输出30.<br>提示：若a+b=const ，则a-b的绝对值越小，ab值越大。贪心策略：将n分成从2开始的连续自然数之和，如果最后剩下一个数，则将此数在后项优先的方式下均匀地分给前面各项。 </li></ol><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp, sum = <span class="number">0</span>, pos = <span class="number">0</span>, count = <span class="number">1</span>, <span class="built_in">array</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="built_in">array</span>[pos++] = k;</span><br><span class="line">        sum += k;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; n) &#123;</span><br><span class="line">            sum -= k;</span><br><span class="line">            temp = n - sum;</span><br><span class="line">            --pos;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = pos - <span class="number">1</span>; temp; --temp) &#123;</span><br><span class="line">        ++<span class="built_in">array</span>[k];</span><br><span class="line">        --k;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            k = pos - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; pos - <span class="number">1</span>; ++k) &#123;</span><br><span class="line">        count *= <span class="built_in">array</span>[k];</span><br><span class="line">    &#125;</span><br><span class="line">    count *= <span class="built_in">array</span>[pos - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-08_221029.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="多机调度问题"><a href="#多机调度问题" class="headerlink" title="多机调度问题"></a>多机调度问题</h4><p>4.多机调度问题。<br>利用贪心法设计算法求解如下问题：<br>要求给出一种作业调度方案，使所给的n个作业在尽可能短的时间内由m台机器加工处理完成。约定，每个作业均可在任何一台机器上加工处理，但未完工前不允许中断处理。作业不能拆分成更小的子作业。<br>这个问题是一个NP完全问题，到目前为止还没有一个有效的解法。对于这一类问题，用贪心选择策略有时可以设计出较好的近似算法。<br>可以考虑以下的贪心策略：<br>（1）最长处理时间作业优先的贪心选择策略。<br>（2）最短处理时间作业优先的贪心选择策略。<br>（3）作业到达时间优先的贪心选择策略。<br>假设7个独立的作业由3台机器加工处理，各作业所需的处理时间为：{2，14，4，6，16，5，3}，写出以上算法求解此问题的结果。 </p><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvertedShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &lt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectMinPos</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, min = tempArrayP[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; s; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; tempArrayP[k]) &#123;</span><br><span class="line">            min = tempArrayP[k];</span><br><span class="line">            index = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMinWaitTime</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> *tempArrayP, <span class="keyword">int</span> *waitTimeArrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = SelectMinPos(s, tempArrayP);</span><br><span class="line">        tempArrayP[index] += waitTimeArrayP[k];</span><br><span class="line">        sum += tempArrayP[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">7</span>, s = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//scanf("%d %d", &amp;n, &amp;s);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> longWaitTime[] = &#123;<span class="number">2</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">3</span>&#125;, shortWaitTime[n], arriveWaitTime[n];</span><br><span class="line">    <span class="keyword">int</span> longWaitTemp[n], shortWaitTemp[n], arriveTemp[n];</span><br><span class="line">    <span class="built_in">memcpy</span>(shortWaitTime, longWaitTime, <span class="keyword">sizeof</span>(longWaitTime));</span><br><span class="line">    <span class="built_in">memcpy</span>(arriveWaitTime, longWaitTime, <span class="keyword">sizeof</span>(longWaitTime));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="comment">//scanf("%d", &amp;longWaitTime[k]);</span></span><br><span class="line">        longWaitTemp[k] = <span class="number">0</span>;</span><br><span class="line">        shortWaitTemp[k] = <span class="number">0</span>;</span><br><span class="line">        arriveTemp[k] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InvertedShellSort(n, longWaitTime);</span><br><span class="line">    ShellSort(n, shortWaitTime);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最长处理时间作业优先的贪心选择策略使用时间为: %d\n"</span>, GetMinWaitTime(n, s, longWaitTime, longWaitTemp));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最短处理时间作业优先的贪心选择策略使用时间为: %d\n"</span>, GetMinWaitTime(n, s, shortWaitTime, shortWaitTemp));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"作业到达时间优先的贪心选择策略使用时间为: %d\n"</span>, GetMinWaitTime(n, s, arriveWaitTime, arriveTemp));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-12-08_223056.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最优服务次序问题&quot;&gt;&lt;a href=&quot;#最优服务次序问题&quot; class=&quot;headerlink&quot; title=&quot;最优服务次序问题&quot;&gt;&lt;/a&gt;最优服务次序问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;最优服务次序问题。&lt;br&gt;问题描述：设有n个顾客同时等待一项服务，顾客i需要的服
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PTA拼题网作业-算法_递归-1116</title>
    <link href="https://xdh129.github.io/2020/11/16/Algorithm-Learning-OnLine-Homework-201116/"/>
    <id>https://xdh129.github.io/2020/11/16/Algorithm-Learning-OnLine-Homework-201116/</id>
    <published>2020-11-16T11:03:41.000Z</published>
    <updated>2020-11-17T12:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归实现逆序输出整数"><a href="#递归实现逆序输出整数" class="headerlink" title="递归实现逆序输出整数"></a>递归实现逆序输出整数</h4><ol><li>本题目要求读入1个正整数n，然后编写递归函数reverse(int n)实现将该正整数逆序输出。</li></ol><p>输入格式:</p><p>输入在一行中给出1个正整数n。</p><p>输出格式:</p><p>对每一组输入，在一行中输出n的逆序数。</p><p>输入样例:</p><blockquote><p>12345 </p></blockquote><p>输出样例:</p><blockquote><p>54321 </p></blockquote><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, n % <span class="number">10</span>);</span><br><span class="line">        reverse(n / <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    reverse(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_155939.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><ol start="2"><li>输入n值(1&lt;=n&lt;=1000)、n个非降序排列的整数以及要查找的数x，使用二分查找算法查找x，输出x所在的下标（0~n-1）及比较次数。若x不存在，输出-1和比较次数。<br>输入格式:</li></ol><p>输入共三行： 第一行是n值； 第二行是n个整数； 第三行是x值。<br>输出格式:</p><p>输出x所在的下标（0~n-1）及比较次数。若x不存在，输出-1和比较次数。<br>输入样例:</p><blockquote><p>4<br>1 2 3 4<br>1 </p></blockquote><p>输出样例:</p><blockquote><p>0<br>2 </p></blockquote><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> arraySize, <span class="keyword">int</span> intArray[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> comparisionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = arraySize - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        ++comparisionCount;</span><br><span class="line">        <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (intArray[mid] == target) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, mid, comparisionCount);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intArray[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intArray[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-1\n%d\n"</span>, comparisionCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> intArray[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;intArray[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">    binarySearch(x, n, intArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_160120.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="改写二分搜索算法"><a href="#改写二分搜索算法" class="headerlink" title="改写二分搜索算法"></a>改写二分搜索算法</h4><ol start="3"><li>设a[0:n-1]是已排好序的数组，请改写二分搜索算法，使得当x不在数组中时，返回小于x的最大元素位置i和大于x的最小元素位置j。当搜索元素在数组中时，i和j相同，均为x在数组中的位置。<br>输入格式:</li></ol><p>输入有两行：</p><p>第一行是n值和x值； 第二行是n个不相同的整数组成的非降序序列，每个整数之间以空格分隔。<br>输出格式:</p><p>输出小于x的最大元素的最大下标i和大于x的最小元素的最小下标j。当搜索元素在数组中时，i和j相同。 提示：若x小于全部数值，则输出：-1 0 若x大于全部数值，则输出：n-1的值 n的值<br>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>6 5<br>2 4 6 8 10 12 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>1 2 </p></blockquote><p>题目来源：《计算机算法设计与分析》，王晓东</p><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> arraySize, <span class="keyword">int</span> intArray[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = arraySize - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (intArray[mid] == target) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, mid, mid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intArray[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intArray[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, right, left);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1 0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> intArray[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;intArray[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binarySearch(x, n, intArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_160325.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="分形的递归输出"><a href="#分形的递归输出" class="headerlink" title="分形的递归输出"></a>分形的递归输出</h4><p>4.分形，具有以非整数维形式充填空间的形态特征。通常被定义为“一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状”，即具有自相似的性质。</p><p>一个盒状分形定义如下： 度为1的盒分形为：</p><blockquote><p>X </p></blockquote><p>度为2的盒分形为：</p><p>略 </p><p>依次类推，如果B(n-1)表示n-1度的盒分形，则n度的盒分形递归定义如下：</p><blockquote><p>B(n - 1)        B(n - 1) </p><pre><code>B(n - 1) </code></pre><p>B(n - 1)        B(n - 1) </p></blockquote><p>请画出度为n的盒分形的图形</p><p>输入格式:</p><p>输入一系列度，每行给出一个不大于7的正整数。输入的最后一行以-1表示输入结束</p><p>输出格式:</p><p>对于每个用例，输出用’X’标记的盒状分形。在每个测试用例后输出包含一个短划线“-”的一行。</p><p>输入样例:</p><blockquote><p>1<br>2<br>3<br>4<br>-1 </p></blockquote><p>输出样例:</p><p>注意：每行的空格请输出完整。</p><p>略</p><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillFraxArray</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> *fraxArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        *(fraxArray + x * MAX + y) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="built_in">pow</span>(<span class="number">3</span>, n - <span class="number">2</span>);</span><br><span class="line">    fillFraxArray(n - <span class="number">1</span>, x, y, fraxArray);</span><br><span class="line">    fillFraxArray(n - <span class="number">1</span>, x + <span class="number">2</span> * size, y, fraxArray);</span><br><span class="line">    fillFraxArray(n - <span class="number">1</span>, x + size, y + size, fraxArray);</span><br><span class="line">    fillFraxArray(n - <span class="number">1</span>, x, y + <span class="number">2</span> * size, fraxArray);</span><br><span class="line">    fillFraxArray(n - <span class="number">1</span>, x + <span class="number">2</span> * size, y + <span class="number">2</span> * size, fraxArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> degree, size;</span><br><span class="line">    <span class="keyword">char</span> fraxArray[MAX][MAX];</span><br><span class="line">    <span class="keyword">char</span> *fraxArrayP = fraxArray[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;degree) &amp;&amp; degree != <span class="number">-1</span>) &#123;</span><br><span class="line">        fillFraxArray(degree, <span class="number">1</span>, <span class="number">1</span>, fraxArrayP);</span><br><span class="line"></span><br><span class="line">        size = <span class="built_in">pow</span>(<span class="number">3</span>, degree - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= size; ++j)</span><br><span class="line">                <span class="keyword">if</span> (fraxArray[i][j]) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"X"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_120141.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="棋盘覆盖"><a href="#棋盘覆盖" class="headerlink" title="棋盘覆盖"></a>棋盘覆盖</h4><ol start="5"><li>在一个2^k * 2^k（k为正整数，k&lt;=10，length=2^k）个方格组成的棋盘中，恰有一个方格与其他方格不同，称该方格为一特殊方格（其坐标为aa,bb，分别代表行坐标号和列坐标号），以及有四种L型骨牌（如下图）。求用若干块这种L型骨牌实现除该特殊点棋盘的全覆盖。（本题要求采用分治算法做）</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ChessPic1.png" alt="棋盘覆盖示例1" title="">                </div>                <div class="image-caption">棋盘覆盖示例1</div>            </figure> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ChessPic2.png" alt="棋盘覆盖示例2" title="">                </div>                <div class="image-caption">棋盘覆盖示例2</div>            </figure> <p>输入格式:</p><p>输入三个数，分别是aa,bb,length.</p><p>输出格式:</p><p>输出整个棋盘。其中特殊方格填为0，然后铺棋盘的顺序为：先铺四个子棋盘交界的部分，然后递归的对每个子棋盘按照左上，右上，右下，左下的顺时针顺序铺满棋盘。每一块骨牌中三个方格数字相同，按照顺序标号，即第一块骨牌全标为1，第二块骨牌全标为2，…，以此类推。输出的每个数占4个场宽，右对齐。</p><p>输入样例:</p><blockquote><p>1 1 4 </p></blockquote><p>表示：特殊格子为（1，1），棋盘有4行4列。</p><p>输出样例:</p><blockquote><p>   0   2   3   3<br>   2   2   1   3<br>   5   1   1   4<br>   5   5   4   4 </p></blockquote><p>表示：先铺三个1（一块L型骨牌），再铺三个2，…，最后铺三个5.</p><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> chessBoardArray[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillChessBoardArray</span><span class="params">(<span class="keyword">int</span> tr, <span class="keyword">int</span> tc, <span class="keyword">int</span> dr, <span class="keyword">int</span> dc, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = count++;</span><br><span class="line">    <span class="keyword">int</span> s = size / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (dr &lt; tr + s &amp;&amp; dc &lt; tc + s) &#123;</span><br><span class="line">        FillChessBoardArray(tr, tc, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        chessBoardArray[tr + s - <span class="number">1</span>][tc + s - <span class="number">1</span>] = t;</span><br><span class="line">        FillChessBoardArray(tr, tc, tr + s - <span class="number">1</span>, tc + s - <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dr &lt; tr + s &amp;&amp; dc &gt;= tc + s) &#123;</span><br><span class="line">        FillChessBoardArray(tr, tc + s, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        chessBoardArray[tr + s - <span class="number">1</span>][tc + s] = t;</span><br><span class="line">        FillChessBoardArray(tr, tc + s, tr + s - <span class="number">1</span>, tc + s, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dr &gt;= tr + s &amp;&amp; dc &gt;= tc + s) &#123;</span><br><span class="line">        FillChessBoardArray(tr + s, tc + s, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        chessBoardArray[tr + s][tc + s] = t;</span><br><span class="line">        FillChessBoardArray(tr + s, tc + s, tr + s, tc + s, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dr &gt;= tr + s &amp;&amp; dc &lt; tc + s) &#123;</span><br><span class="line">        FillChessBoardArray(tr + s, tc, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        chessBoardArray[tr + s][tc + s - <span class="number">1</span>] = t;</span><br><span class="line">        FillChessBoardArray(tr + s, tc, tr + s, tc + s - <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aa, bb, length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">            chessBoardArray[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;aa, &amp;bb, &amp;length);</span><br><span class="line">    FillChessBoardArray(<span class="number">0</span>, <span class="number">0</span>, aa - <span class="number">1</span>, bb - <span class="number">1</span>, length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%4d"</span>, chessBoardArray[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-28_131056.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="循环日程表"><a href="#循环日程表" class="headerlink" title="循环日程表"></a>循环日程表</h4><ol start="6"><li>设有N个选手进行循环比赛，其中N=2​M​​，要求每名选手要与其他N−1名选手都赛一次，每名选手每天比赛一次，循环赛共进行N−1天，要求每天没有选手轮空。<br>输入格式:</li></ol><p>输入：M(M&lt;=7)。</p><p>输出格式:</p><p>输出：表格形式的比赛安排表。一行各数据间用一个空格隔开。</p><p>输入样例:</p><blockquote><p>3 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>1 2 3 4 5 6 7 8<br>2 1 4 3 6 5 8 7<br>3 4 1 2 7 8 5 6<br>4 3 2 1 8 7 6 5<br>5 6 7 8 1 2 3 4<br>6 5 8 7 2 1 4 3<br>7 8 5 6 3 4 1 2<br>8 7 6 5 4 3 2 1  </p></blockquote><p>说明，第一行为：1 2 3 4 5 6 7 8，1表示本行都是1号选手和其他选手的比赛，如第2个数为2（其下标可以看成1）表示第一天1号和2号比赛，第5个数为5（其下标可以看成4），表示1号和5号在第4天比赛。</p><h5 id="程序代码-5"><a href="#程序代码-5" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillArray</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> fillSize, <span class="keyword">int</span> arraySize, <span class="keyword">int</span> *<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fillSize &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        fillArray(x, y, fillSize / <span class="number">2</span>, arraySize, <span class="built_in">array</span>);</span><br><span class="line">        fillArray(x, y + fillSize / <span class="number">2</span>, fillSize / <span class="number">2</span>, arraySize, <span class="built_in">array</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x + fillSize / <span class="number">2</span>; i &lt; x + fillSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + fillSize / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">            *(<span class="built_in">array</span> + i * arraySize + j) = *(<span class="built_in">array</span> + (i - fillSize / <span class="number">2</span>) * arraySize + (j + fillSize / <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x + fillSize / <span class="number">2</span>; i &lt; x + fillSize; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y + fillSize / <span class="number">2</span>; j &lt; y + fillSize; ++j) &#123;</span><br><span class="line">            *(<span class="built_in">array</span> + i * arraySize + j) = *(<span class="built_in">array</span> + (i - fillSize / <span class="number">2</span>) * arraySize + (j - fillSize / <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> competitorCount = <span class="built_in">pow</span>(<span class="number">2</span>, m);</span><br><span class="line">    <span class="keyword">int</span> arrangeArray[competitorCount][competitorCount];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *arrangeArrayP = arrangeArray[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; competitorCount; ++k) &#123;</span><br><span class="line">        arrangeArray[<span class="number">0</span>][k] = k + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fillArray(<span class="number">0</span>, <span class="number">0</span>, competitorCount, competitorCount, arrangeArrayP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; competitorCount; ++a) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; competitorCount; ++b) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, arrangeArray[a][b]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-5"><a href="#运行截图-5" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_161146.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;递归实现逆序输出整数&quot;&gt;&lt;a href=&quot;#递归实现逆序输出整数&quot; class=&quot;headerlink&quot; title=&quot;递归实现逆序输出整数&quot;&gt;&lt;/a&gt;递归实现逆序输出整数&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;本题目要求读入1个正整数n，然后编写递归函数reverse(in
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法设计实验3-递归与分治-1116</title>
    <link href="https://xdh129.github.io/2020/11/16/Algorithm-Learning-Homework-201116/"/>
    <id>https://xdh129.github.io/2020/11/16/Algorithm-Learning-Homework-201116/</id>
    <published>2020-11-16T10:15:02.000Z</published>
    <updated>2020-11-17T05:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h4><ol><li>无穷数列1，1，2，3，5，8，13，21，34，55，……，称为Fibonacci数列。它可以被递归地定义为: </li></ol><p><img src="2020-11-20_101308.png" alt="Fibonacci数列"> </p><p>第n个Fibonacci数可递归地计算如下：</p><p>int fibonacci(int n) {<br>    if (n &lt;= 1) {<br>        return 1;<br>    }<br>    return fibonacci(n - 1) + fibonacci(n - 2);<br>}</p><p>1) 编写完整的主函数，分别记录利用上述递归函数求第47, 48, 49, 50, 51,52个Fibonacci数所花费的时间。</p><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> startTime, endTime;</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">47</span>; k &lt;= <span class="number">52</span>; ++k) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, fibonacci(k));</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = clock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n计算总耗时为 %.fms"</span>, difftime(endTime, startTime));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-20_100952.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><p>2) 将递归函数改为尾递归，或者是递推函数，求第47,48,49,50,51,52个Fibonacci数所花费的时间，观察效率是否得到提高。</p><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> startTime, endTime;</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">47</span>; k &lt;= <span class="number">52</span>; ++k) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, fibonacci(k));</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = clock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n计算总耗时为 %.fms"</span>, difftime(endTime, startTime));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-20_102924.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="角谷定理"><a href="#角谷定理" class="headerlink" title="角谷定理"></a>角谷定理</h4><ol start="2"><li>角谷定理。输入一个自然数,若为偶数,则把它除以2,若为奇数,则把它乘以3加1。经过如此有限次运算后,总可以得到自然数值1。求经过多少次可得到自然数1。</li></ol><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n = n * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-20_104410.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="n级台阶计算走法"><a href="#n级台阶计算走法" class="headerlink" title="n级台阶计算走法"></a>n级台阶计算走法</h4><ol start="3"><li>有n级台阶，可以一步上一个台阶，也可以一步上两个台阶，编写程序，计算共有多少种不同的走法。 </li></ol><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"上%d级台阶共有%lld种走法\n"</span>, n, fibonacci(n));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-20_105714.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="半数集问题"><a href="#半数集问题" class="headerlink" title="半数集问题"></a>半数集问题</h4><p>4.半数集问题。<br>问题描述：给定一个自然数n，由n开始可以依次产生半数集set(n)中的数如下：<br>(1)n∈set(n);<br>(2) 在n的左边加上一个自然数，但该自然数不能超过最近添加的数的一半；<br>(3) 按此规则进行处理，直到不能再添加自然数为止。<br>例如，set(6)={6,16,26,126,36,136}，半数集set(6)中有6个元素。<br>输入：整数n(0&lt;n&lt;1000)<br>输出：半数集set(n)中的元素个数。<br>请设计递归函数，求出set(n)的个数，并分析算法时间复杂度，对算法进行改进，用程序验证递归算法，以及改进之后的算法。 </p><p>递归算法:</p><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HalfSet</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">            temp += HalfSet(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, HalfSet(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-20_111702.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><p>改进之后的算法: </p><h5 id="程序代码-5"><a href="#程序代码-5" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> halfSet[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HalfSet</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (halfSet[n]) &#123;</span><br><span class="line">        <span class="keyword">return</span> halfSet[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">        temp += HalfSet(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, HalfSet(n));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-5"><a href="#运行截图-5" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-20_112702.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Fibonacci数列&quot;&gt;&lt;a href=&quot;#Fibonacci数列&quot; class=&quot;headerlink&quot; title=&quot;Fibonacci数列&quot;&gt;&lt;/a&gt;Fibonacci数列&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;无穷数列1，1，2，3，5，8，13，21，34，55，
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PTA拼题网作业-算法_枚举-1111</title>
    <link href="https://xdh129.github.io/2020/11/11/Algorithm-Learning-OnLine-Homework-201111/"/>
    <id>https://xdh129.github.io/2020/11/11/Algorithm-Learning-OnLine-Homework-201111/</id>
    <published>2020-11-11T12:31:41.000Z</published>
    <updated>2020-11-12T05:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="穷举问题-搬砖"><a href="#穷举问题-搬砖" class="headerlink" title="穷举问题-搬砖"></a>穷举问题-搬砖</h4><ol><li>某工地需要搬运砖块，已知男人一人搬3块，女人一人搬2块，小孩两人搬1块。如果想用n人正好搬n块砖，问有多少种搬法？</li></ol><p>输入格式:<br>输入在一行中给出一个正整数n。</p><p>输出格式:</p><p>输出在每一行显示一种方案，按照”men = cnt_m, women = cnt_w, child = cnt_c”的格式，输出男人的数量cnt_m，女人的数量cnt_w，小孩的数量cnt_c。请注意，等号的两侧各有一个空格，逗号的后面也有一个空格。</p><p>如果找不到符合条件的方案，则输出”None”<br>输入样例:</p><blockquote><p>45 </p></blockquote><p>输出样例:</p><blockquote><p>men = 0, women = 15, child = 30<br>men = 3, women = 10, child = 32<br>men = 6, women = 5, child = 34<br>men = 9, women = 0, child = 36 </p></blockquote><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> foundFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n / <span class="number">2</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span> * n; k += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + j + k == n &amp;&amp; i * <span class="number">3</span> + j * <span class="number">2</span> + k / <span class="number">2</span> == n) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"mem = %d, women = %d, child = %d\n"</span>, i, j, k);</span><br><span class="line">                    foundFlag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!foundFlag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"None\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_154731.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="百鸡问题扩展-N鸡问题"><a href="#百鸡问题扩展-N鸡问题" class="headerlink" title="百鸡问题扩展-N鸡问题"></a>百鸡问题扩展-N鸡问题</h4><ol start="2"><li>N元钱买N只鸡，公鸡每只5元，母鸡每只3元，小鸡1元3只，N元钱必须刚好买N只鸡，而且鸡必须整只买，不能劈开买。<br>有几种买法呢？这就是N鸡问题。<br>输入格式:</li></ol><p>在一行中输入一个正整数N。（N&lt;500）<br>输出格式:</p><p>在一行中输出两个整数c s，中间用一个空格隔开，表示N元钱买N只鸡共有 c 种买法，且所有买法的公鸡数量之和是 s。<br>如果无解，则 s 为 -1.<br>输入样例1:</p><blockquote><p>100 </p></blockquote><p>输出样例1:</p><blockquote><p>4 24 </p></blockquote><p>输入样例2:</p><blockquote><p>1 </p></blockquote><p>输出样例2:</p><blockquote><p>0 -1 </p></blockquote><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, c = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> foundFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n / <span class="number">3</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = n - i - j;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">5</span> * i + <span class="number">3</span> * j + k / <span class="number">3</span> == n &amp;&amp; k % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                ++c;</span><br><span class="line">                s += i;</span><br><span class="line">                foundFlag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (foundFlag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, c, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d -1\n"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_154953.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="输出全排列"><a href="#输出全排列" class="headerlink" title="输出全排列"></a>输出全排列</h4><ol start="3"><li>输入整数n（3&lt;=n&lt;=7）,编写程序输出1,2,…,n整数的全排列，按字典序输出。<br>输入格式:</li></ol><p>一行输入正整数n。<br>输出格式:</p><p>按字典序输出1到n的全排列。每种排列占一行，数字间无空格。<br>输入样例:</p><p>在这里给出一组输入。例如：</p><blockquote><p>3 </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>123<br>132<br>213<br>231<br>312<br>321 </p></blockquote><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">customSortAlgo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkArrayOrder</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> arraySize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arraySize &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j != arraySize - <span class="number">1</span> &amp;&amp; (<span class="built_in">array</span>[i] &gt;= <span class="built_in">array</span>[j])) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">array</span>[i] &gt;= <span class="built_in">array</span>[j]) &amp;&amp; j == arraySize - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arraySize;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; arraySize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numArray[<span class="number">7</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arraySize; ++k) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numArray[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (checkArrayOrder(numArray, arraySize)) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = arraySize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k != <span class="number">0</span> &amp;&amp; numArray[k] &lt;= numArray[k - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k - <span class="number">1</span> != <span class="number">0</span> &amp;&amp; numArray[k] &lt;= numArray[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (numArray[k - <span class="number">1</span>] &lt; numArray[k]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numArray[k - <span class="number">1</span>] &lt; numArray[k]) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = numArray[k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> aPos = k - <span class="number">1</span>;</span><br><span class="line">            k = arraySize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k != <span class="number">0</span> &amp;&amp; a &gt;= numArray[k]) &#123;</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; numArray[k]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = numArray[k];</span><br><span class="line">                numArray[k] = numArray[aPos];</span><br><span class="line">                numArray[aPos] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">std</span>::sort(numArray + aPos + <span class="number">1</span>, numArray + arraySize, customSortAlgo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arraySize; ++k) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numArray[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_155238.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="梅森数"><a href="#梅森数" class="headerlink" title="梅森数"></a>梅森数</h4><p>4.形如2​n​​−1的素数称为梅森数（Mersenne Number）。例如2​2​​−1=3、2​3​​−1=7都是梅森数。1722年，双目失明的瑞士数学大师欧拉证明了2​31​​−1=2147483647是一个素数，堪称当时世界上“已知最大素数”的一个记录。</p><p>本题要求编写程序，对任一正整数n（n&lt;20），输出所有不超过2​n​​−1的梅森数。<br>输入格式：</p><p>输入在一行中给出正整数n（n&lt;20）。<br>输出格式：</p><p>按从小到大的顺序输出所有不超过2​n​​−1的梅森数，每行一个。如果完全没有，则输出“None”。<br>输入样例：</p><blockquote><p>6 </p></blockquote><p>输出样例：</p><blockquote><p>3<br>7<br>31 </p></blockquote><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> foundFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="built_in">pow</span>(<span class="number">2</span>, k) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">2</span>; x &lt;= <span class="built_in">sqrt</span>(temp); ++x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp % x == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="built_in">sqrt</span>(temp)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp);</span><br><span class="line">            foundFlag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!foundFlag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"None"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_155433.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="换硬币"><a href="#换硬币" class="headerlink" title="换硬币"></a>换硬币</h4><ol start="5"><li>将一笔零钱换成5分、2分和1分的硬币，要求每种硬币至少有一枚，有几种不同的换法？</li></ol><p>输入格式:</p><p>输入在一行中给出待换的零钱数额x∈(8,100)。</p><p>输出格式:</p><p>要求按5分、2分和1分硬币的数量依次从大到小的顺序，输出各种换法。每行输出一种换法，格式为：“fen5:5分硬币数量, fen2:2分硬币数量, fen1:1分硬币数量, total:硬币总数量”。最后一行输出“count = 换法个数”。</p><p>输入样例:</p><blockquote><p>13 </p></blockquote><p>输出样例:</p><blockquote><p>fen5:2, fen2:1, fen1:1, total:4<br>fen5:1, fen2:3, fen1:2, total:6<br>fen5:1, fen2:2, fen1:4, total:7<br>fen5:1, fen2:1, fen1:6, total:8<br>count = 4 </p></blockquote><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">3</span>) / <span class="number">5</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = (n - <span class="number">5</span> * i - <span class="number">1</span>) / <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"fen5:%d, fen2:%d, fen1:%d, total:%d\n"</span>, i, j, n - <span class="number">5</span> * i - <span class="number">2</span> * j, i + j + n - <span class="number">5</span> * i - <span class="number">2</span> * j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"count = %d"</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_155600.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;穷举问题-搬砖&quot;&gt;&lt;a href=&quot;#穷举问题-搬砖&quot; class=&quot;headerlink&quot; title=&quot;穷举问题-搬砖&quot;&gt;&lt;/a&gt;穷举问题-搬砖&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;某工地需要搬运砖块，已知男人一人搬3块，女人一人搬2块，小孩两人搬1块。如果想用n人正好
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法设计实验2-枚举与递推-1111</title>
    <link href="https://xdh129.github.io/2020/11/11/Algorithm-Learning-Homework-201111/"/>
    <id>https://xdh129.github.io/2020/11/11/Algorithm-Learning-Homework-201111/</id>
    <published>2020-11-11T12:15:02.000Z</published>
    <updated>2020-11-12T05:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="输出所有可能的五位数"><a href="#输出所有可能的五位数" class="headerlink" title="输出所有可能的五位数"></a>输出所有可能的五位数</h4><ol><li>由0到4五个数字，组成5位数，每个数字用一次，但十位和百位不能为3（当然万位不能为0），输出所有可能的五位数。 </li></ol><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">customSortAlgo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkArrayOrder</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> arraySize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arraySize &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j != arraySize - <span class="number">1</span> &amp;&amp; (*(<span class="built_in">array</span> + i) &gt;= *(<span class="built_in">array</span> + j))) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((*(<span class="built_in">array</span> + i) &gt;= *(<span class="built_in">array</span> + j)) &amp;&amp; j == arraySize - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customShowArray</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> arraySize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="built_in">array</span>) &amp;&amp; *(<span class="built_in">array</span> + <span class="number">2</span>) &amp;&amp; *(<span class="built_in">array</span> + <span class="number">3</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arraySize; ++k) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *(<span class="built_in">array</span> + k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arraySize;</span><br><span class="line">    arraySize = <span class="number">5</span>; <span class="comment">//std::cin &gt;&gt; arraySize;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numArray[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (checkArrayOrder(numArray, arraySize)) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = arraySize - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k != <span class="number">0</span> &amp;&amp; numArray[k] &lt;= numArray[k - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k - <span class="number">1</span> != <span class="number">0</span> &amp;&amp; numArray[k] &lt;= numArray[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (numArray[k - <span class="number">1</span>] &lt; numArray[k]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numArray[k - <span class="number">1</span>] &lt; numArray[k]) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = numArray[k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> aPos = k - <span class="number">1</span>;</span><br><span class="line">            k = arraySize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k != <span class="number">0</span> &amp;&amp; a &gt;= numArray[k]) &#123;</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; numArray[k]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = numArray[k];</span><br><span class="line">                numArray[k] = numArray[aPos];</span><br><span class="line">                numArray[aPos] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">std</span>::sort(numArray + aPos + <span class="number">1</span>, numArray + arraySize, customSortAlgo);</span><br><span class="line">        &#125;</span><br><span class="line">        customShowArray(numArray, arraySize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_120752.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="最大子段和问题"><a href="#最大子段和问题" class="headerlink" title="最大子段和问题"></a>最大子段和问题</h4><ol start="2"><li>最大子段和问题<br>给定由n个整数组成的序列，求序列中子段的最大和，若所有整数均为负整数时定义最大子段和为0。<br>例如, 当（a1,a2,a3,a4 ,a5,a6) = （-2,11,-4,13,-5,-2）时，最大子段和为: a2+a3+a4=20<br>输入格式:<br>第一行输入整数个数n（1≤n≤10000），再依次输入n个整数。<br>输出格式:<br>输出第一行为最大子段和，第二行为子段第一个数和最后一个数在整个序列中的位序。<br>输入样例1:<br>5</li></ol><p>-2 11 -4 13 -5 -2<br>输出样例1:<br>20<br>2 4</p><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arraySize;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arraySize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> intArray[arraySize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arraySize; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;intArray[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sumBeginPos, sumEndPos, currentMaxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arraySize; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextSum = intArray[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arraySize; ++j) &#123;</span><br><span class="line">            nextSum = nextSum + intArray[j];</span><br><span class="line">            <span class="keyword">if</span> (nextSum &gt; currentMaxSum) &#123;</span><br><span class="line">                currentMaxSum = nextSum;</span><br><span class="line">                sumBeginPos = i + <span class="number">1</span>;</span><br><span class="line">                sumEndPos = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, currentMaxSum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sumBeginPos, sumEndPos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_121356.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="列出所有可能的比赛名单"><a href="#列出所有可能的比赛名单" class="headerlink" title="列出所有可能的比赛名单"></a>列出所有可能的比赛名单</h4><ol start="3"><li>有两队选手每队5人进行一对一的比赛，甲队为A、B、C、D、E，乙队为J、K、L、M、N，经过抽签决定比赛对手名单。规定A不和J比赛， M不和D及E比赛。列出所有可能的比赛名单。 </li></ol><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">70</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">74</span>; j &lt; <span class="number">79</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((i == <span class="number">65</span> &amp;&amp; j == <span class="number">74</span>) || (j == <span class="number">77</span> &amp;&amp; (i == <span class="number">68</span> || i == <span class="number">69</span>)))) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c versus %c\n"</span>, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_123135.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="推算荒岛上最初有多少金币"><a href="#推算荒岛上最初有多少金币" class="headerlink" title="推算荒岛上最初有多少金币"></a>推算荒岛上最初有多少金币</h4><p>4.有5个海盗，相约进行一次帆船比赛。比赛中天气发生突变，他们被冲散了，恰巧，他们都先后经过途中的一个无名的荒岛，并且每个人都信心满满，觉得自己实第一个经过该岛的人。第一个人在沙滩上发现了一堆金币。他把金币分成5等份。发现刚好少一个金币。他就从自己口袋拿出一个金币补充进去，然后把属于自己的那份拿走。<br>第二个到达的人也看到了金币，他也和第一个人一样，把所有金币5等分，发现刚好缺少一个金币，于是自己补进去一个，拿走了属于自己的那份。<br>第三，第四，第五人的情况一模一样。<br>等他们到了目的地，都说自己的情况，才恍然大悟，一起去荒岛找金币，然而再也没有找到荒岛。他们都惋惜地说：岛上还有一千多枚金币呢！<br>请你根据这些信息，推算荒岛上最初有多少金币？ </p><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> coinCount = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> foundFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!foundFlag) &#123;</span><br><span class="line">        ++coinCount;</span><br><span class="line">        <span class="keyword">int</span> temp = coinCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((<span class="keyword">int</span>) ((temp + <span class="number">1</span>) * <span class="number">0.8</span>) % <span class="number">4</span>) &amp;&amp; temp % <span class="number">5</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">4</span>) &#123;</span><br><span class="line">                    foundFlag = <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"荒岛上最初有%d枚金币\n"</span>, coinCount);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++temp;</span><br><span class="line">                temp *= <span class="number">0.8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_143521.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="冰雹粒子在冰雹云中翻滚增长"><a href="#冰雹粒子在冰雹云中翻滚增长" class="headerlink" title="冰雹粒子在冰雹云中翻滚增长"></a>冰雹粒子在冰雹云中翻滚增长</h4><p>5.任意给定一个正整数N，如果是偶数，执行：N/2；如果是奇数，执行：N*3+1。生成的新的数字再执行同样的动作，循环往复，通过观察发现，这个数字会一会儿上升到很高，一会儿又降落下来。就这样起起落落的，但最终必会落到“1”这有点像小冰雹粒子在冰雹云中翻滚增长的样子。比如N=9：9,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1<br>可以看到，N=9的时候，这个“小冰雹”最高冲到了52这个高度。<br>输入格式：一个正整数N（N&lt;1000000）<br>输出格式：一个正整数，表示不大于N的数字，经过冰雹数变换过程中，最高冲到了多少。<br>例如，输入：</p><blockquote><p>10 </p></blockquote><p>程序应该输出：</p><blockquote><p>52 </p></blockquote><p>再例如，输入：</p><blockquote><p>100 </p></blockquote><p>程序应该输出：</p><blockquote><p>9232 </p></blockquote><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, max = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = k;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                temp /= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = temp * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; max) &#123;</span><br><span class="line">                max = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_163445.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;输出所有可能的五位数&quot;&gt;&lt;a href=&quot;#输出所有可能的五位数&quot; class=&quot;headerlink&quot; title=&quot;输出所有可能的五位数&quot;&gt;&lt;/a&gt;输出所有可能的五位数&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;由0到4五个数字，组成5位数，每个数字用一次，但十位和百位不能为
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PTA拼题网作业-算法_绪论-1109</title>
    <link href="https://xdh129.github.io/2020/11/09/Algorithm-Learning-OnLine-Homework-201109/"/>
    <id>https://xdh129.github.io/2020/11/09/Algorithm-Learning-OnLine-Homework-201109/</id>
    <published>2020-11-09T10:53:47.000Z</published>
    <updated>2020-11-10T12:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="办事大厅排队"><a href="#办事大厅排队" class="headerlink" title="办事大厅排队"></a>办事大厅排队</h4><ol><li>在郑州大学综合办事大厅，每天陆陆续续有很多人来排队办事。现在你能否写程序帮助老师时刻了解当前办理业务的情况。 </li></ol><p>请同学们学习C++ STL中 list相关内容后，编程实践。<br>输入格式:</p><p>第一行一个数字N，表示排队信息或者查询信息条目的数量。</p><p>以下N行，每行的内容有以下3种情况</p><p>(1) in name 表示名字为name的人员新来到办事大厅，排在队伍的最后。（in和name间存在一个空格，name是名字对应字符串，长度不超过10）。</p><p>(2) out 表示当前排在最前面的人已经办理完业务，离开了。</p><p>(3) q 表示一次查询，请输出当前正在办理业务的人，也就是队伍的第1个人。如果当前无人办理业务，则输出“NULL”，不包括引号。<br>输出格式:</p><p>请根据以上信息，每次遇到查询时，对应一行输出。如果这时队伍有人，则输出第一个人的姓名，否则输出NULL。<br>输入样例:</p><blockquote><p>5<br>in A<br>out<br>q<br>in B<br>q </p></blockquote><p>输出样例:</p><p>在这里给出相应的输出。例如：</p><blockquote><p>NULL<br>B </p></blockquote><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> querySize;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; querySize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; listQueue;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> nextArg;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; querySize; ++k) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nextArg;</span><br><span class="line">        <span class="keyword">if</span> (nextArg == <span class="string">"in"</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nextArg;</span><br><span class="line">            listQueue.emplace_back(nextArg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nextArg == <span class="string">"out"</span>) &#123;</span><br><span class="line">            listQueue.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nextArg == <span class="string">"q"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!listQueue.empty()) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; listQueue.front();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_152957.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="利用STL比较数据大小并排序"><a href="#利用STL比较数据大小并排序" class="headerlink" title="利用STL比较数据大小并排序"></a>利用STL比较数据大小并排序</h4><ol start="2"><li>本题目要求读入n个整数（输入数字个数根据输入时随机确定，以输入一个非数字的值作为输入结束标志），利用STL比较数据大小并排序（由小到大升序），然后输出排序后的数据。</li></ol><p>输入格式:</p><p>输入在一行中依次输入整数值，每个数字之间用空格分隔，输入数字个数根据输入时随机确定，以输入一个非数字的值作为输入结束标志。</p><p>输出格式:</p><p>先输出一段提示“从标准设备读入数据，直到输入是非整型数据为止”，在输入一组数字后，输出排序后的数字，在一行中由小到大依次输出所有值，数字之间用空格分隔。<br>输入样例:</p><blockquote><p>10 3 -2 8 20 -9 e </p></blockquote><p>输出样例:</p><blockquote><p>从标准设备读入数据，直到输入是非整型数据为止<br> -9 -2 3 8 10 20 </p></blockquote><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">customSortAlgo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intVector;</span><br><span class="line">    <span class="keyword">int</span> nextInt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"从标准设备读入数据，直到输入是非整型数据为止"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nextInt) &#123;</span><br><span class="line">        intVector.emplace_back(nextInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    intVector.shrink_to_fit();</span><br><span class="line">    <span class="built_in">std</span>::sort(intVector.begin(), intVector.end(), customSortAlgo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = intVector.begin(); iter != intVector.end(); ++iter) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; *iter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_153224.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="跳一跳"><a href="#跳一跳" class="headerlink" title="跳一跳"></a>跳一跳</h4><ol start="3"><li>微信小程序中的跳一跳相信大家都玩过。emmm？？？只学习不玩游戏？那就吃亏了…好好读题理解吧。 　　<br>简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。 　　<br>如果跳到了方块上，但没有跳到方块的中心则获得1分；<br>跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8…）。 　　<br>现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。</li></ol><p>输入格式:</p><p>输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，</p><blockquote><p>1表示此次跳跃跳到了方块上但是没有跳到中心，<br>2表示此次跳跃跳到了方块上并且跳到了方块中心，<br>0表示此次跳跃没有跳到方块上（此时游戏结束）。 </p></blockquote><p>对于所有评测用例，输入的数字不超过30个</p><p>输出格式:</p><p>　输出一个整数，为本局游戏的得分（在本题的规则下）。<br>输入样例:</p><blockquote><p>1 1 2 2 2 1 1 2 2 0 </p></blockquote><p>输出样例:</p><blockquote><p>22 </p></blockquote><h5 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nextInt, loopFlag = <span class="number">1</span>, jumpCombo = <span class="number">0</span>, totalScore = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (loopFlag) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nextInt);</span><br><span class="line">        <span class="keyword">switch</span> (nextInt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                jumpCombo = <span class="number">0</span>;</span><br><span class="line">                ++totalScore;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (jumpCombo != <span class="number">0</span>) &#123;</span><br><span class="line">                    ++jumpCombo;</span><br><span class="line">                    totalScore += jumpCombo * <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    jumpCombo = <span class="number">1</span>;</span><br><span class="line">                    totalScore += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                loopFlag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, totalScore);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_153428.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>4.给定N个（长整型范围内的）整数，要求输出从小到大排序后的结果。</p><p>本题旨在测试各种不同的排序算法在各种数据情况下的表现。各组测试数据特点如下：<br>数据1：只有1个元素；<br>数据2：11个不相同的整数，测试基本正确性；<br>数据3：103个随机整数；<br>数据4：104个随机整数；<br>数据5：105个随机整数；<br>数据6：105个顺序整数；<br>数据7：105个逆序整数；<br>数据8：105个基本有序的整数；<br>数据9：105个随机正整数，每个数字不超过1000。</p><p>输入格式:</p><p>输入第一行给出正整数N（≤10​5​​），随后一行给出N个（长整型范围内的）整数，其间以空格分隔。</p><p>输出格式:</p><p>在一行中输出从小到大排序后的结果，数字间以1个空格分隔，行末不得有多余空格。</p><p>输入样例:</p><blockquote><p>11<br>4 981 10 -17 0 -20 29 50 8 43 -5 </p></blockquote><p>输出样例:</p><blockquote><p>-20 -17 -5 0 4 8 10 29 43 50 981 </p></blockquote><h5 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">customSortAlgo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arraySize;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; arraySize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> intArray[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arraySize; ++k) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; intArray[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(intArray, intArray + arraySize, customSortAlgo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arraySize - <span class="number">1</span>; ++k) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; intArray[k] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; intArray[arraySize - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-3"><a href="#运行截图-3" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_153604.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="求前缀表达式的值"><a href="#求前缀表达式的值" class="headerlink" title="求前缀表达式的值"></a>求前缀表达式的值</h4><ol start="5"><li>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。前缀表达式指二元运算符位于两个运算数之前，例如2+3*(7-4)+8/4的前缀表达式是：+ + 2 * 3 - 7 4 / 8 4。请设计程序计算前缀表达式的结果值。</li></ol><p>输入格式:</p><p>输入在一行内给出不超过30个字符的前缀表达式，只包含+、-、*、/以及运算数，不同对象（运算数、运算符号）之间以空格分隔。</p><p>输出格式:</p><p>输出前缀表达式的运算结果，保留小数点后1位，或错误信息ERROR。</p><p>输入样例:</p><ul><li><ul><li>2 * 3 - 7 4 / 8 4 </li></ul></li></ul><p>输出样例:</p><blockquote><p>13.0 </p></blockquote><h5 id="程序代码-4"><a href="#程序代码-4" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> exps[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> expSize = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; calcStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; exps[expSize++]) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    expSize -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = expSize - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exps[k].length() == <span class="number">1</span> &amp;&amp; (exps[k][<span class="number">0</span>] == <span class="string">'+'</span> || exps[k][<span class="number">0</span>] == <span class="string">'-'</span> || exps[k][<span class="number">0</span>] == <span class="string">'*'</span> || exps[k][<span class="number">0</span>] == <span class="string">'/'</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (calcStack.size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">double</span> a = calcStack.top();</span><br><span class="line">            calcStack.pop();</span><br><span class="line">            <span class="keyword">double</span> b = calcStack.top();</span><br><span class="line">            calcStack.pop();</span><br><span class="line">            <span class="keyword">switch</span> (exps[k][<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>: &#123;</span><br><span class="line">                    calcStack.push(a + b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>: &#123;</span><br><span class="line">                    calcStack.push(a - b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'*'</span>: &#123;</span><br><span class="line">                    calcStack.push(a * b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'/'</span>: &#123;</span><br><span class="line">                    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    calcStack.push(a / b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> x = atof(exps[k].c_str());</span><br><span class="line">            calcStack.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (calcStack.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.1f"</span>, calcStack.top());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图-4"><a href="#运行截图-4" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-19_154049.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;办事大厅排队&quot;&gt;&lt;a href=&quot;#办事大厅排队&quot; class=&quot;headerlink&quot; title=&quot;办事大厅排队&quot;&gt;&lt;/a&gt;办事大厅排队&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;在郑州大学综合办事大厅，每天陆陆续续有很多人来排队办事。现在你能否写程序帮助老师时刻了解当前办理
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法设计实验1-算法设计基础-1109</title>
    <link href="https://xdh129.github.io/2020/11/09/Algorithm-Learning-Homework-201109/"/>
    <id>https://xdh129.github.io/2020/11/09/Algorithm-Learning-Homework-201109/</id>
    <published>2020-11-09T10:33:47.000Z</published>
    <updated>2020-11-10T12:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="求两个整数的最大公约数"><a href="#求两个整数的最大公约数" class="headerlink" title="求两个整数的最大公约数"></a>求两个整数的最大公约数</h4><p>1.分别用穷举法和欧几里德算法实现求两个整数的最大公约数，并比较算法的效率。 </p><h5 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getGCDEuclid</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        temp = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getGCDExhaustive</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a &gt; b ? a : b;</span><br><span class="line">    <span class="keyword">while</span> (a % temp || b % temp) &#123;</span><br><span class="line">        --temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> startTime, endTime;</span><br><span class="line">    startTime = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000000</span>; ++k) &#123;</span><br><span class="line">        getGCDEuclid(<span class="number">21</span>, <span class="number">10001203</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"使用欧几里得法求两个整数的最大公约数1000000次耗时为 %fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>; ++k) &#123;</span><br><span class="line">        getGCDExhaustive(<span class="number">21</span>, <span class="number">10001203</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"使用穷举法求两个整数的最大公约数100次耗时为 %fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-18_134003.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/><h4 id="排序算法效率比较"><a href="#排序算法效率比较" class="headerlink" title="排序算法效率比较"></a>排序算法效率比较</h4><p><strong>2.编程实现以下几种不同的排序算法（以升序为例）：冒泡排序、选择排序、希尔排序、快速排序，比较不同的排序过程的运行时间。具体要求：</strong><br>（1）为了消除数据之间差异导致排序效果的影响，使用相同的数组进行排序，方法为：首先创建一个数组，数组长度至少为100000，数组元素取值范围在[0, 100000]。 之间的随机正整数，并将这个数组复制4份，分别用不同的排序算法进行排序。<br>（2）记录不同排序算法的运行时间。<br>（3）对完全逆序的情况进行测试，将待排序数组赋值为逆序，即与最终排序要求完全相反。 </p><h5 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码:"></a>程序代码:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> isOrdered = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arraySize - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arraySize - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*(arrayP + j) &gt; *(arrayP + j + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                *(arrayP + j) = *(arrayP + j + <span class="number">1</span>);</span><br><span class="line">                *(arrayP + j + <span class="number">1</span>) = temp;</span><br><span class="line">                isOrdered = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isOrdered) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arraySize - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arraySize; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*(arrayP + i) &gt; *(arrayP + j)) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + i);</span><br><span class="line">                *(arrayP + i) = *(arrayP + j);</span><br><span class="line">                *(arrayP + j) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &gt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvertedShellSort</span><span class="params">(<span class="keyword">int</span> arraySize, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arraySize / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; arraySize; j += gap) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(arrayP + j);</span><br><span class="line">                <span class="keyword">int</span> k = j - gap;</span><br><span class="line">                <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; *(arrayP + k) &lt; temp) &#123;</span><br><span class="line">                    *(arrayP + k + gap) = *(arrayP + k);</span><br><span class="line">                    k -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                *(arrayP + k + gap) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> *arrayP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = start;</span><br><span class="line">    <span class="keyword">int</span> b = end;</span><br><span class="line">    <span class="keyword">int</span> temp = *(arrayP + start);</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end &amp;&amp; temp &lt;= *(arrayP + end)) &#123;</span><br><span class="line">            --end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; *(arrayP + end)) &#123;</span><br><span class="line">            *(arrayP + start) = *(arrayP + end);</span><br><span class="line">            ++start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end &amp;&amp; temp &gt;= *(arrayP + start)) &#123;</span><br><span class="line">            ++start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; arrayP[start]) &#123;</span><br><span class="line">            *(arrayP + end) = *(arrayP + start);</span><br><span class="line">            --end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *(arrayP + start) = temp;</span><br><span class="line">    QuickSort(a, start - <span class="number">1</span>, arrayP);</span><br><span class="line">    QuickSort(start + <span class="number">1</span>, b, arrayP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> startTime, endTime;</span><br><span class="line">    <span class="keyword">int</span> randomIntArrayBubbleSort[<span class="number">100000</span>], randomIntArraySelectionSort[<span class="number">100000</span>], randomIntArrayShellSort[<span class="number">100000</span>], randomIntArrayQuickSort[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100000</span>; ++k) &#123;</span><br><span class="line">        randomIntArrayBubbleSort[k] = ((rand() &lt;&lt; <span class="number">2</span>) ^ rand()) % <span class="number">100000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(randomIntArraySelectionSort, randomIntArrayBubbleSort, <span class="keyword">sizeof</span>(randomIntArrayBubbleSort));</span><br><span class="line">    <span class="built_in">memcpy</span>(randomIntArrayShellSort, randomIntArrayBubbleSort, <span class="keyword">sizeof</span>(randomIntArrayBubbleSort));</span><br><span class="line">    <span class="built_in">memcpy</span>(randomIntArrayQuickSort, randomIntArrayBubbleSort, <span class="keyword">sizeof</span>(randomIntArrayBubbleSort));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大小为100000的随机数组排序\n"</span>);</span><br><span class="line">    startTime = clock();</span><br><span class="line">    BubbleSort(<span class="number">100000</span>, randomIntArrayBubbleSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"冒泡排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    SelectionSort(<span class="number">100000</span>, randomIntArraySelectionSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"选择排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    ShellSort(<span class="number">100000</span>, randomIntArrayShellSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"希尔排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    QuickSort(<span class="number">0</span>, <span class="number">99999</span>, randomIntArrayQuickSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"快速排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    InvertedShellSort(<span class="number">100000</span>, randomIntArrayBubbleSort);</span><br><span class="line">    <span class="built_in">memcpy</span>(randomIntArraySelectionSort, randomIntArrayBubbleSort, <span class="keyword">sizeof</span>(randomIntArrayBubbleSort));</span><br><span class="line">    <span class="built_in">memcpy</span>(randomIntArrayShellSort, randomIntArrayBubbleSort, <span class="keyword">sizeof</span>(randomIntArrayBubbleSort));</span><br><span class="line">    <span class="built_in">memcpy</span>(randomIntArrayQuickSort, randomIntArrayBubbleSort, <span class="keyword">sizeof</span>(randomIntArrayBubbleSort));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大小为100000的逆序数组排序\n"</span>);</span><br><span class="line">    startTime = clock();</span><br><span class="line">    BubbleSort(<span class="number">100000</span>, randomIntArrayBubbleSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"冒泡排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    SelectionSort(<span class="number">100000</span>, randomIntArraySelectionSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"选择排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    ShellSort(<span class="number">100000</span>, randomIntArrayShellSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"希尔排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    startTime = clock();</span><br><span class="line">    QuickSort(<span class="number">0</span>, <span class="number">99999</span>, randomIntArrayQuickSort);</span><br><span class="line">    endTime = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"快速排序用时: %.1fms\n"</span>, difftime(endTime, startTime));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免堆栈溢出，通过配置CMakeList.txt手动修改了堆栈大小为16M: </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-18_213554.png" alt="CMake配置截图" title="">                </div>                <div class="image-caption">CMake配置截图</div>            </figure> <h5 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图:"></a>运行截图:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-11-18_213542.png" alt="运行截图" title="">                </div>                <div class="image-caption">运行截图</div>            </figure> <br/>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;求两个整数的最大公约数&quot;&gt;&lt;a href=&quot;#求两个整数的最大公约数&quot; class=&quot;headerlink&quot; title=&quot;求两个整数的最大公约数&quot;&gt;&lt;/a&gt;求两个整数的最大公约数&lt;/h4&gt;&lt;p&gt;1.分别用穷举法和欧几里德算法实现求两个整数的最大公约数，并比较算法
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="算法设计" scheme="https://xdh129.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>软件工程作业-1020/1026</title>
    <link href="https://xdh129.github.io/2020/10/20/Software-Engineering-Homework-201020/"/>
    <id>https://xdh129.github.io/2020/10/20/Software-Engineering-Homework-201020/</id>
    <published>2020-10-20T11:23:47.000Z</published>
    <updated>2020-10-26T09:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MVC与MVP的区别"><a href="#MVC与MVP的区别" class="headerlink" title="MVC与MVP的区别"></a>MVC与MVP的区别</h4><p>MVC模式指Model-View-Controller(模型-视图-控制器)模式，MVP模式指Model-View-Presenter模式。 </p><p>MVC: </p><blockquote><p>Model：数据处理层，可以直接和View进行交互<br>View：布局，界面逻辑<br>Controller：把特定的功能逻辑抽离出来，作为控制层，保证View层和Model层的功能单一性，便于维护 </p></blockquote><p>MVP: </p><blockquote><p>Model：数据处理层<br>View：显示层<br>Presenter：功能逻辑层 </p></blockquote><h4 id="JSP内置对象session与HttpSession是同一个东西吗？"><a href="#JSP内置对象session与HttpSession是同一个东西吗？" class="headerlink" title="JSP内置对象session与HttpSession是同一个东西吗？"></a>JSP内置对象session与HttpSession是同一个东西吗？</h4><p>它们的使用方法是一样的，并且存放在session对象中的数据都是保存在服务器端的 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MVC与MVP的区别&quot;&gt;&lt;a href=&quot;#MVC与MVP的区别&quot; class=&quot;headerlink&quot; title=&quot;MVC与MVP的区别&quot;&gt;&lt;/a&gt;MVC与MVP的区别&lt;/h4&gt;&lt;p&gt;MVC模式指Model-View-Controller(模型-视图-控制器)
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="软件工程" scheme="https://xdh129.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>软件工程作业-1015</title>
    <link href="https://xdh129.github.io/2020/10/15/Software-Engineering-Homework-201015/"/>
    <id>https://xdh129.github.io/2020/10/15/Software-Engineering-Homework-201015/</id>
    <published>2020-10-15T11:02:12.000Z</published>
    <updated>2020-10-15T11:02:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是形式化方法"><a href="#什么是形式化方法" class="headerlink" title="什么是形式化方法?"></a>什么是形式化方法?</h4><p>形式化方法是以严格的数学化和机械化方法为基础来规约、构建和验证计算系统，是改善和确保计算系统质量的重要方法，其模型、技术和工具已延生成为计算思维的重要载体。 </p><p>在计算机科学和软件工程领域，形式化方法是基于数学的特种技术，适合于软件和硬件系统的描述、开发和验证。将形式化方法用于软件和硬件设计，是期望能够像其它工程学科一样，使用适当的数学分析以提高设计的可靠性和鲁棒性。但是，由于采用形式化方法的成本高意味着它们通常只用于开发注重安全性的高度整合的系统。<br>形式化方法在古代就已有运用,而在现代逻辑中形式化方法又有了进一步的发展和完善。这种方法特别在数学、计算机科学、人工智能等领域得到广泛运用。它能精确地揭示各种逻辑规律,制定相应的逻辑规则,使各种理论体系更加严密。同时也能正确地训练思维、提高思维的抽象能力。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是形式化方法&quot;&gt;&lt;a href=&quot;#什么是形式化方法&quot; class=&quot;headerlink&quot; title=&quot;什么是形式化方法?&quot;&gt;&lt;/a&gt;什么是形式化方法?&lt;/h4&gt;&lt;p&gt;形式化方法是以严格的数学化和机械化方法为基础来规约、构建和验证计算系统，是改善和确保计算
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="软件工程" scheme="https://xdh129.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>软件工程作业-1013</title>
    <link href="https://xdh129.github.io/2020/10/14/Software-Engineering-Homework-201013/"/>
    <id>https://xdh129.github.io/2020/10/14/Software-Engineering-Homework-201013/</id>
    <published>2020-10-14T05:30:26.000Z</published>
    <updated>2020-10-14T05:30:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><h4 id="为什么软件开发的周期总是预估的2-3倍"><a href="#为什么软件开发的周期总是预估的2-3倍" class="headerlink" title="为什么软件开发的周期总是预估的2~3倍?"></a>为什么软件开发的周期总是预估的2~3倍?</h4><blockquote><p>Quora上有人提问：为什么软件开发的周期总是预估的2~3倍?<br>这是开发者的错?还是管理的问题?技术粗糙，或者其他原因?或者这只是程序猿世界的自然法则? </p></blockquote><p>总结: 软件开发的预估周期可能会和实际情况有偏差，开发的过程中会遇到各种各样的问题或者是需求的更改，从而延长软件开发的周期。 </p><p>3.</p><h4 id="什么是分而治之"><a href="#什么是分而治之" class="headerlink" title="什么是分而治之?"></a>什么是分而治之?</h4><p>以下为百度百科上的解答: </p><blockquote><p>分而治之方法与软件设计的模块化方法非常相似。为了解决一个大的问题，可以： </p><p>1) 把它分成两个或多个更小的问题；<br>2) 分别解决每个小问题；<br>3) 把各小问题的解答组合起来，即可得到原问题的解答。 </p></blockquote><p>4.</p><h4 id="什么是WBS"><a href="#什么是WBS" class="headerlink" title="什么是WBS?"></a>什么是WBS?</h4><p>在实施计划的基础上，更进一步地将每项工作细化。经过细化的工作分别落实到某一个项目团队成员，落实到每一天，这种方法就叫做工作分解结构（WBS）法。WBS由最低级的工作任务组成，它是项目每一个阶段的时间表和路标。WBS可以将项目分解为一些更小和可操作的部分。WBS的每个阶段就好像是夹在起始日期和结束之内三明治，开始和结束日期的确定使项目的其他阶段可以按计划进行。每个阶段的起止日期明确也能保证项目经理可以预计何时整个项目能够圆满完成。 </p><h4 id="WBS的作用"><a href="#WBS的作用" class="headerlink" title="WBS的作用:"></a>WBS的作用:</h4><p>WBS明确了完成项目所需进行的工作。也可使人产生紧迫感和责任感，为项目的如期完成而努力。WBS能防止项目范围的盲目扩大，当甲方打算向已存在的项目增加新内容时，WBS能避免这种事的发生，WBS提供了一种控制手段。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.&lt;/p&gt;
&lt;h4 id=&quot;为什么软件开发的周期总是预估的2-3倍&quot;&gt;&lt;a href=&quot;#为什么软件开发的周期总是预估的2-3倍&quot; class=&quot;headerlink&quot; title=&quot;为什么软件开发的周期总是预估的2~3倍?&quot;&gt;&lt;/a&gt;为什么软件开发的周期总是预估的2~3
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="软件工程" scheme="https://xdh129.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>软件工程作业-0929</title>
    <link href="https://xdh129.github.io/2020/09/30/Software-Engineering-Homework-200929/"/>
    <id>https://xdh129.github.io/2020/09/30/Software-Engineering-Homework-200929/</id>
    <published>2020-09-30T12:26:48.000Z</published>
    <updated>2020-09-30T12:26:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><h4 id="对软件工程课程的希望及个人目标"><a href="#对软件工程课程的希望及个人目标" class="headerlink" title="对软件工程课程的希望及个人目标"></a>对软件工程课程的希望及个人目标</h4><p>通过软件工程这门课程，我希望能够学习到软件开发的工程设计方法与工程思想，因为它能够帮助我们更好地利用有限的时间，编写出结构更清晰，易于维护且尽可能高内聚低耦合的软件。 </p><p>3.</p><h4 id="软件工程是不是教会不怎么会写程序的人开发软件"><a href="#软件工程是不是教会不怎么会写程序的人开发软件" class="headerlink" title="软件工程是不是教会不怎么会写程序的人开发软件?"></a>软件工程是不是教会不怎么会写程序的人开发软件?</h4><blockquote><p>“Software Engineering, of course, presents itself as another worthy cause, but that is eyewash: if you carefully read its literature and analyse what its devotees actually do, you will discover that Software Engineering has accepted as its charter ‘How to program if you cannot’.” </p></blockquote><p>我认为软件工程本身是一种用来指导软件开发的理论思想，而它本身与开发软件所用到的实践性知识(比如语言/框架/API的使用)并不密切相关，但软件工程的工程设计思想确实能更好地指导大型软件的开发。 </p><p>举一个例子，编写一个3D应用程序需要用到计算机图形学的知识，然而纯粹的计算机图形学并没有教授你如何实际开发一个3D应用程序，因为开发3D应用程序需要涉及到图形API的使用，但没有计算机图形学知识的铺垫，会很难理解开发中使用到的图形API是如何工作的。我觉得这个例子中计算机图形学与图形API(实际开发)的关系和软件工程思想与开发软件的关系比较类似。<br><br/></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-09-30_192458.png" alt="GAMES101 Course" title="">                </div>                <div class="image-caption">GAMES101 Course</div>            </figure> <p>所以我不同意”软件工程就是教会不怎么会写程序的人开发软件”这一说法。<br><br/><br>4.</p><h4 id="the-Manifesto-for-Software-Craftsmanship"><a href="#the-Manifesto-for-Software-Craftsmanship" class="headerlink" title="the Manifesto for Software Craftsmanship"></a>the Manifesto for Software Craftsmanship</h4><p>地址: <a href="http://manifesto.softwarecraftsmanship.org" target="_blank" rel="noopener">http://manifesto.softwarecraftsmanship.org</a><br><br/></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-09-30_193457.png" alt="the Manifesto for Software Craftsmanship" title="">                </div>                <div class="image-caption">the Manifesto for Software Craftsmanship</div>            </figure> <br/><p>5.</p><h4 id="有人负责，才有质量"><a href="#有人负责，才有质量" class="headerlink" title="有人负责，才有质量"></a>有人负责，才有质量</h4><p><a href="https://www.ituring.com.cn/article/9363" target="_blank" rel="noopener">https://www.ituring.com.cn/article/9363</a><br>如今软件中使用别的开源库/组件的情况非常普遍，因为对于大部分人来说，如果已经有了一个能动的而且经过多次完善加工过的轮子(成熟的框架)，就似乎没有必要再自己从无到有地再造一个轮子。而且我发现现在的软件开发已经不可避免地需要复用已有的框架/组件才能支撑接下来的开发，比如安卓需要基于各种Framework，iOS需要基于系统框架Foundation/UIKit/Core Graphics，因为现在的这些移动平台都已经经过多年的发展，形成了自己的一套体系，所以只有遵守这样的体系才能进行现代化的移动应用开发。 </p><p>6.</p><h4 id="软件工程方法论对我们的软件开发有多大用处"><a href="#软件工程方法论对我们的软件开发有多大用处" class="headerlink" title="软件工程方法论对我们的软件开发有多大用处?"></a>软件工程方法论对我们的软件开发有多大用处?</h4><p>我认为软件工程方法论可以指导我们在有限的时间内开发出结构良好，易于维护且高内聚低耦合的软件。它包括技术和管理两方面的内容，技术方面包括一些软件结构的设计思想与设计模式，通过特定的开发方式能够创建出结构良好易于维护的软件。管理方面则是管理人员通过计划、组织和控制等方式，合理地推进软件的开发以及分配好所需的不同资源，让软件达到目的需求，最终得以成功开发。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.&lt;/p&gt;
&lt;h4 id=&quot;对软件工程课程的希望及个人目标&quot;&gt;&lt;a href=&quot;#对软件工程课程的希望及个人目标&quot; class=&quot;headerlink&quot; title=&quot;对软件工程课程的希望及个人目标&quot;&gt;&lt;/a&gt;对软件工程课程的希望及个人目标&lt;/h4&gt;&lt;p&gt;通过软件工程这门
      
    
    </summary>
    
    
      <category term="作业" scheme="https://xdh129.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="作业" scheme="https://xdh129.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://xdh129.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="软件工程" scheme="https://xdh129.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在Flutter应用中调用原生Java/C代码</title>
    <link href="https://xdh129.github.io/2020/09/20/Implementing-Native-Java-C-Code-in-a-Flutter-Application/"/>
    <id>https://xdh129.github.io/2020/09/20/Implementing-Native-Java-C-Code-in-a-Flutter-Application/</id>
    <published>2020-09-20T07:55:41.000Z</published>
    <updated>2020-09-20T09:29:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="flutter-lockup-logo.png" alt="Flutter Logo" title="">                </div>                <div class="image-caption">Flutter Logo</div>            </figure> <p> Flutter是谷歌的全新移动应用框架，它拥有的热重载以及跨平台的界面开发能力使得我们能在短时间内构建出界面美观的现代化移动应用。然而因为Flutter框架主要使用的是Dart语言，而一些系统SDK又是以原生Java代码编写的，这让调用成了一个问题。然而Flutter框架已经为我们准备好了解决方案，它允许我们在不同语言中互相调用方法。</p><blockquote><p>Flutter允许开发者通过编写平台通道(Platform Channel)方法的方式来在Dart语言中调用以Kotlin/Java/Swift/Objetive-C编写的代码，来实现访问iOS和Android上的原生系统功能和系统SDK的目的。 </p></blockquote><p>以上是谷歌官方的介绍，所以在这里我将演示一下如何在使用Dart语言编写的Flutter应用中调用原生Java编写的代码。 </p><p>1.在Flutter项目中再次打开其中的Java语言项目目录(Kotlin等其他语言同理)<br><br/></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-09-20_161607.png" alt="Flutter项目" title="">                </div>                <div class="image-caption">Flutter项目</div>            </figure> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2020-09-20_161746.png" alt="Java语言项目目录" title="">                </div>                <div class="image-caption">Java语言项目目录</div>            </figure> <br/>2.在Java语言项目目录的MainActivity.java文件中编写平台通道(Platform Channel)，以和Dart语言部分进行交互<p>其中CHANNEL变量为平台通道名称，需要和Dart语言中使用的平台通道名称一致 </p><p>示例代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FlutterActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL = <span class="string">"com.company.testplatformchannel"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureFlutterEngine</span><span class="params">(@NonNull FlutterEngine flutterEngine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configureFlutterEngine(flutterEngine);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)</span><br><span class="line">                .setMethodCallHandler(</span><br><span class="line">                        (call, result) -&gt; &#123;</span><br><span class="line">                            <span class="comment">// Note: this method is invoked on the main thread.</span></span><br><span class="line">                            <span class="keyword">if</span> (call.method.equals(<span class="string">"getSomgthingFromJava"</span>)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((String) call.argument(<span class="string">"inputText"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    result.success(getJavaText((String) call.argument(<span class="string">"inputText"</span>), (<span class="keyword">int</span>) call.argument(<span class="string">"anotherArgument"</span>)));</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    result.error(<span class="string">"UNAVAILABLE"</span>, <span class="string">"This Method is not available now."</span>, <span class="keyword">null</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                result.notImplemented();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/>3.在Dart语言部分调用平台通道(Platform Channel)，并尝试获取信息<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> CHANNEL = <span class="keyword">const</span> MethodChannel(<span class="string">'com.company.testplatformchannel'</span>);</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _getSomgthingFromJava(<span class="built_in">String</span> inputText,<span class="built_in">int</span> translateType) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> outputText;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> result = <span class="keyword">await</span> CHANNEL.invokeMethod(<span class="string">'getTranslateText'</span>,&#123;<span class="string">"inputText"</span>:inputText,<span class="string">"anotherArgument"</span>:anotherArgument&#125;);</span><br><span class="line">    outputText = <span class="string">'<span class="subst">$result</span>'</span>;</span><br><span class="line">  &#125; on PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    outputText = <span class="string">"Failed to contact with that Java method: '<span class="subst">$&#123;e.message&#125;</span>'."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _outputText = outputText;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多关于如何在Flutter框架中使用平台通道的信息可以在这里找到:<br><a href="https://flutterchina.club/platform-channels/" target="_blank" rel="noopener">https://flutterchina.club/platform-channels/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
      <category term="应用框架" scheme="https://xdh129.github.io/categories/%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Flutter" scheme="https://xdh129.github.io/tags/Flutter/"/>
    
      <category term="iOS" scheme="https://xdh129.github.io/tags/iOS/"/>
    
      <category term="Android" scheme="https://xdh129.github.io/tags/Android/"/>
    
      <category term="跨平台" scheme="https://xdh129.github.io/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="调用" scheme="https://xdh129.github.io/tags/%E8%B0%83%E7%94%A8/"/>
    
      <category term="Java" scheme="https://xdh129.github.io/tags/Java/"/>
    
      <category term="Kotlin" scheme="https://xdh129.github.io/tags/Kotlin/"/>
    
      <category term="Dart" scheme="https://xdh129.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xdh129.github.io/2017/06/17/hello-world-hexo/"/>
    <id>https://xdh129.github.io/2017/06/17/hello-world-hexo/</id>
    <published>2017-06-17T00:00:00.000Z</published>
    <updated>2017-06-17T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>现已迁移至Hexo，一个轻量级的开源博客框架。<br>From now on we’re running on Hexo, a lighter &amp; powerful open-source blog framework powered by Node.js.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现已迁移至Hexo，一个轻量级的开源博客框架。&lt;br&gt;From now on we’re running on Hexo, a lighter &amp;amp; powerful open-source blog framework powered by Node.js.&lt;br&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>此博客将暂停更新一段时间</title>
    <link href="https://xdh129.github.io/2014/01/04/stop-updating/"/>
    <id>https://xdh129.github.io/2014/01/04/stop-updating/</id>
    <published>2014-01-04T05:56:21.000Z</published>
    <updated>2014-01-04T05:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>博主决定以后将把自己的个人日记记在本机上，在这里博主也推荐一个记日记的软件，叫eDiary，对于记日记来说完全够用了。以后博主将会将大部分重心放在记本机日记上，不再更新此博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博主决定以后将把自己的个人日记记在本机上，在这里博主也推荐一个记日记的软件，叫eDiary，对于记日记来说完全够用了。以后博主将会将大部分重心放在记本机日记上，不再更新此博客。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Pre-Blog" scheme="https://xdh129.github.io/categories/Pre-Blog/"/>
    
    
      <category term="停止" scheme="https://xdh129.github.io/tags/%E5%81%9C%E6%AD%A2/"/>
    
      <category term="日记" scheme="https://xdh129.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="更新" scheme="https://xdh129.github.io/tags/%E6%9B%B4%E6%96%B0/"/>
    
      <category term="软件" scheme="https://xdh129.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用带有离线下载功能的网盘转存Youtube视频教程</title>
    <link href="https://xdh129.github.io/2013/08/27/download-youtube-videos-to-domestic-online-disk/"/>
    <id>https://xdh129.github.io/2013/08/27/download-youtube-videos-to-domestic-online-disk/</id>
    <published>2013-08-27T08:49:09.000Z</published>
    <updated>2013-08-27T08:49:09.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="8903d91559c5b1fc3ad0fb807cb331df.jpg" alt="YouTube Logo" title="">                </div>                <div class="image-caption">YouTube Logo</div>            </figure> <p>有时，我们看到喜欢的Youtube视频，需要把它转存至国内网盘，但却因为网络问题，无法快速上传/下载视频。没关系，这里有一个不需要本地下载Youtube视频即可将它存至国内网盘的办法。<font color='red'>（此方法的主要目的不是下载Youtube视频，而是转存视频至国内网盘）</font> </p><p>需要：一枚有<font color='red'>离线下载</font>功能的网盘的帐号 </p><p>1.进入<a href="http://unrestrict.li/download" target="_blank" rel="noopener">http://unrestrict.li/download</a>，将想下载的u2b视频的地址粘贴进输入框中。然后点击“Unrestrict links!”。得到一排链接 </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="89999546.png" alt="步骤1图片" title="">                </div>                <div class="image-caption">步骤1图片</div>            </figure> <br/><br/>2.下面出现的这些链接是这个视频不同清晰度的下载地址，选择自己需要的那个（注意分辨率和文件后缀名），点击左边的“Download” 3.出现一个文件下载页面，我们按照提示输入验证码，如看不清，点击输入框右边的旋转图标，输入完后，点击下面的“Download” <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="7777777771466.png" alt="步骤3图片" title="">                </div>                <div class="image-caption">步骤3图片</div>            </figure> <p>4.出现了真正的文件下载页面，不要直接点击，右键复制它的链接即可 </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="777777.png" alt="步骤4图片" title="">                </div>                <div class="image-caption">步骤4图片</div>            </figure> <p>PS：这时还不能直接进入网盘，直接离线下载，因为直接使用此链接离线下载，网盘会提示“地址中含有非法字符”或“参数错误”(BUG) </p><p>5.百度搜索“短链接”，点击顶部的第一个应用“网址缩短” </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1255646.png" alt="步骤5图片" title="">                </div>                <div class="image-caption">步骤5图片</div>            </figure> <p>6.在输入框中粘贴网址，点击右边的“缩短”，得到下面出现的缩短后链接，复制它 </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5555555.png" alt="步骤6图片" title="">                </div>                <div class="image-caption">步骤6图片</div>            </figure> <p>7.大功告成，现在就可以进入网盘，新建离线下载任务，粘贴刚得到的链接，进行离线下载了 看来速度还行 </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="46546494564.png" alt="步骤7图片" title="">                </div>                <div class="image-caption">步骤7图片</div>            </figure> <p>PS：使用360云盘进行离线下载肯定会出现下面的情况，不需要担心，等到离线下载完成后文件大小会自动改变的 </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="54658654.png" alt="PS1图片" title="">                </div>                <div class="image-caption">PS1图片</div>            </figure> <br/><br/>=============================================== <p><font color='red'>注意，离线下载完成后记得改文件名</font><br><br/><br><br/><br>本文同样发布在卡饭上：<a href="http://bbs.kafan.cn/thread-1619457-1-1.html" target="_blank" rel="noopener">http://bbs.kafan.cn/thread-1619457-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
      <category term="Pre-Blog" scheme="https://xdh129.github.io/categories/Pre-Blog/"/>
    
    
      <category term="Youtube" scheme="https://xdh129.github.io/tags/Youtube/"/>
    
      <category term="下载" scheme="https://xdh129.github.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="网盘" scheme="https://xdh129.github.io/tags/%E7%BD%91%E7%9B%98/"/>
    
      <category term="视频" scheme="https://xdh129.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="转存" scheme="https://xdh129.github.io/tags/%E8%BD%AC%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>已通关游戏列表</title>
    <link href="https://xdh129.github.io/2013/08/25/complete-the-game-list/"/>
    <id>https://xdh129.github.io/2013/08/25/complete-the-game-list/</id>
    <published>2013-08-25T08:49:50.000Z</published>
    <updated>2013-08-25T08:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>博主家的电脑是一台古董机，因此很多游戏都玩不了/痛苦。但是自从有了云游戏，让博主的电脑玩上了许多原本因配置原因玩不了的游戏。<br>废话不多说，下面列出我所有通关过的游戏： </p><p><font color='red'>1.双星物语2（本机）-APRG<br>2.疯狂农场2（本机）-SLG PS：貌似有很多英文游戏都用这个译名，这个游戏的原名是Mania Farm 2<br>3.超级马里奥1（FC模拟器）-ACT<br>4.孤岛惊魂3（云游戏）-FPS<br>5.孤岛危机2（云游戏）-FPS<br>6.植物大战僵尸（本机）-PUZ<br>7.上古卷轴5（云游戏）-ARPG-未玩任何DLC-玩时已作弊:无敌+全技能+全技能点+各种物品、金钱get<br>8.魔兽争霸3（本机）-RTS-神作，绝对经典<br>9.泰坦尼克:宿命旅行（本机）-PUZ-这游戏不错！<br>10.</font> </p><p>放上古董机配置： </p><p>AIDA64 检测报告： </p><p><a href="https://xdh129.github.io/2013/08/25/complete-the-game-list/AIDA64%203.00.2578%20Beta.htm">AIDA64 3.00.2578 Beta.htm</a><br><br/><br><br/><br>================分隔线================ </p><p>另外，我的手机CPU是armv5te架构的，因此注定和这台古董机一样，同样是很多游戏都玩不了 </p><p>已通关游戏列表：<br>暂时木有，基本都只玩到一半 </p><p>这里是手机详细配置：<br>型号：ZTE-U880E<br>CPU：Marvell PXA920H（armv5te）<br>GPU：Vivante GC530<br>RAM：436M </p><p>================分隔线================<br>这里是博主未通关，觉得精品的游戏<br>1.耻辱（在云游戏玩到一半，-玩到被自己的朋友背叛的剧情，被好心船夫送到某地-，结果存档不见了，不见了）<br>2.狂野飙车6、7、8代 -手机（确实不错）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博主家的电脑是一台古董机，因此很多游戏都玩不了/痛苦。但是自从有了云游戏，让博主的电脑玩上了许多原本因配置原因玩不了的游戏。&lt;br&gt;废话不多说，下面列出我所有通关过的游戏： &lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;1.双星物语2（本机）-APRG&lt;br&gt;2.疯狂
      
    
    </summary>
    
    
      <category term="Pre-Blog" scheme="https://xdh129.github.io/categories/Pre-Blog/"/>
    
    
      <category term="云游戏" scheme="https://xdh129.github.io/tags/%E4%BA%91%E6%B8%B8%E6%88%8F/"/>
    
      <category term="游戏" scheme="https://xdh129.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="AIDA64" scheme="https://xdh129.github.io/tags/AIDA64/"/>
    
      <category term="armv5" scheme="https://xdh129.github.io/tags/armv5/"/>
    
      <category term="低配机的愤怒" scheme="https://xdh129.github.io/tags/%E4%BD%8E%E9%85%8D%E6%9C%BA%E7%9A%84%E6%84%A4%E6%80%92/"/>
    
      <category term="低配置" scheme="https://xdh129.github.io/tags/%E4%BD%8E%E9%85%8D%E7%BD%AE/"/>
    
      <category term="列表" scheme="https://xdh129.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="梦想" scheme="https://xdh129.github.io/tags/%E6%A2%A6%E6%83%B3/"/>
    
      <category term="通关" scheme="https://xdh129.github.io/tags/%E9%80%9A%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>360云盘升级 超440GB永久免费+离线下载+文件加密+在线播放+无限分享流量+群共享+秒传</title>
    <link href="https://xdh129.github.io/2013/08/22/get-360-yunpan-storage-space/"/>
    <id>https://xdh129.github.io/2013/08/22/get-360-yunpan-storage-space/</id>
    <published>2013-08-22T04:06:48.000Z</published>
    <updated>2013-08-22T04:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>超过440G云盘免费永久空间领取教程： </p><p><a href="http://e.weibo.com/2420259703/A5B0QcQ29" target="_blank" rel="noopener">http://e.weibo.com/2420259703/A5B0QcQ29</a> </p><p>360G地址：<a href="http://huodong.yunpan.360.cn/na360g" target="_blank" rel="noopener">http://huodong.yunpan.360.cn/na360g</a> </p><p>手机卫士5G+27G地址：<a href="http://bbs.360safe.com/thread-2210439-1-1.html" target="_blank" rel="noopener">http://bbs.360safe.com/thread-2210439-1-1.html</a> </p><p>360搜索 36G地址： <a href="http://www.so.com/holiday/816.html" target="_blank" rel="noopener">http://www.so.com/holiday/816.html</a> </p><p>=======================================================<br>简单任务440G到手，如还需要更大免费空间 可以参加以下活动： </p><p>例如在360手机助手软件特权栏目中安装360一些移动端应用 也可以获取几G空间，做完之后 450G永久免费空间不是梦。<br>还有安全卫士等级特权赠送云盘空间，目前一共累计赠送15G（各等级特权）<br>以及云盘自身等级特权赠送空间，也是一共几十G 全部搞定后+每日抽奖空间 总计会达到500G+。<br>还有一个1024G任务：<a href="http://huodong.yunpan.360.cn/" target="_blank" rel="noopener">http://huodong.yunpan.360.cn/</a><br><br/><br>此文转自：<a href="http://bbs.kafan.cn/thread-1616502-1-1.html" target="_blank" rel="noopener">http://bbs.kafan.cn/thread-1616502-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;超过440G云盘免费永久空间领取教程： &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://e.weibo.com/2420259703/A5B0QcQ29&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://e.weibo.com/242025970
      
    
    </summary>
    
    
      <category term="Pre-Blog" scheme="https://xdh129.github.io/categories/Pre-Blog/"/>
    
    
      <category term="360" scheme="https://xdh129.github.io/tags/360/"/>
    
      <category term="云盘" scheme="https://xdh129.github.io/tags/%E4%BA%91%E7%9B%98/"/>
    
      <category term="免费" scheme="https://xdh129.github.io/tags/%E5%85%8D%E8%B4%B9/"/>
    
      <category term="存储空间" scheme="https://xdh129.github.io/tags/%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/"/>
    
      <category term="扩容" scheme="https://xdh129.github.io/tags/%E6%89%A9%E5%AE%B9/"/>
    
      <category term="竞争" scheme="https://xdh129.github.io/tags/%E7%AB%9E%E4%BA%89/"/>
    
  </entry>
  
</feed>
